=== FILE INVENTORY ===
./.next/server/app/journal/page_client-reference-manifest.js
./.next/server/interception-route-rewrite-manifest.js
./.next/server/middleware-build-manifest.js
./.next/server/middleware-react-loadable-manifest.js
./.next/server/next-font-manifest.js
./.next/server/server-reference-manifest.js
./.next/static/chunks/app/journal/page.js
./.next/static/chunks/app/layout.js
./.next/static/chunks/webpack.js
./.next/static/development/_buildManifest.js
./.next/static/development/_ssgManifest.js
./.next/static/webpack/app/journal/page.89955ae7f378bd80.hot-update.js
./.next/static/webpack/app/journal/page.8ee38ebf18bfae66.hot-update.js
./.next/static/webpack/app/journal/page.ae9de7a3375e2b7d.hot-update.js
./.next/static/webpack/app/journal/page.b8242b6d5ae4a0a0.hot-update.js
./.next/static/webpack/app/journal/page.cb8c837a4ab51759.hot-update.js
./.next/static/webpack/app/layout.79f48f2cff5dc924.hot-update.js
./.next/static/webpack/app/layout.89955ae7f378bd80.hot-update.js
./.next/static/webpack/app/layout.8ee38ebf18bfae66.hot-update.js
./.next/static/webpack/app/layout.ae9de7a3375e2b7d.hot-update.js
./.next/static/webpack/app/layout.b8242b6d5ae4a0a0.hot-update.js
./.next/static/webpack/app/layout.cb8c837a4ab51759.hot-update.js
./.next/static/webpack/webpack.79f48f2cff5dc924.hot-update.js
./.next/static/webpack/webpack.89955ae7f378bd80.hot-update.js
./.next/static/webpack/webpack.8ee38ebf18bfae66.hot-update.js
./.next/static/webpack/webpack.ae9de7a3375e2b7d.hot-update.js
./.next/static/webpack/webpack.b8242b6d5ae4a0a0.hot-update.js
./.next/static/webpack/webpack.cb8c837a4ab51759.hot-update.js
./.next/types/cache-life.d.ts
./jest.config.js
./jest.setup.js
./next-env.d.ts
./postcss.config.js
./prettier.config.js
./src/__tests__/Example.test.jsx
./src/app/api/audio-tracks/route.js
./src/app/api/chart-debug/route.js
./src/app/api/chart-visual/route.js
./src/app/api/journal/[id]/route.js
./src/app/api/journal/route.js
./src/app/api/journal/stats/route.js
./src/app/book/[sectionSlug]/SectionPageClient.jsx
./src/app/book/[sectionSlug]/page.js
./src/app/book/page.js
./src/app/dashboard/page.jsx
./src/app/design-test/page.jsx
./src/app/forgot-password/page.js
./src/app/full-audio-player/page.js
./src/app/journal/page.js
./src/app/layout.js
./src/app/login/page.js
./src/app/onboarding/page.jsx
./src/app/page.js
./src/app/signup/page.js
./src/app/supabase-test/page.js
./src/app/test-apis/page.js
./src/app/test-chart-debug/page.js
./src/app/test-debug/page.jsx
./src/app/test-golden-simple/page.js
./src/app/test-journal-system/page.js
./src/app/test-new-audio/page.js
./src/components/AudioPlayer.jsx
./src/components/ErrorBoundary.tsx
./src/components/ImmersiveSectionPlayer.jsx
./src/components/Layout.tsx
./src/components/LoadingSpinner.tsx
./src/components/UnifiedAudioPlayer.jsx
./src/components/journal/JournalEditor.jsx
./src/components/journal/JournalEntryCard.jsx
./src/components/journal/JournalEntryList.jsx
./src/components/journal/JournalEntryModal.jsx
./src/components/journal/JournalHeader.jsx
./src/components/journal/JournalStats.jsx
./src/components/journal/MindsetBadge.tsx
./src/components/journal/MindsetDiscernmentCards.jsx
./src/components/journal/MindsetSelector.tsx
./src/components/journal/NewJournalEntry.jsx
./src/components/journal/SacredJournalEntry.jsx
./src/components/onboarding/AssessmentStep.jsx
./src/components/onboarding/CompletionStep.jsx
./src/components/onboarding/GlassCard.jsx
./src/components/onboarding/IntentionsStep.jsx
./src/components/onboarding/PathSelectionStep.jsx
./src/components/onboarding/TwoMindsStep.jsx
./src/components/onboarding/WelcomeScreen.jsx
./src/components/onboarding/WizardLayout.jsx
./src/components/ui/index.ts
./src/components/ui/sacred-button.tsx
./src/components/ui/sacred-card.tsx
./src/components/ui/sacred-input.tsx
./src/components/ui/types.ts
./src/constants/index.ts
./src/constants/onboardingDataSchema.ts
./src/contexts/AuthContext.tsx
./src/contexts/PlaylistContext.tsx
./src/hooks/index.ts
./src/hooks/types.ts
./src/hooks/useAdvancedAudioPlayer-old.js
./src/hooks/useAudioPlayer.ts
./src/hooks/useAudioTracks-old.js
./src/hooks/useLogin.ts
./src/hooks/useSection.ts
./src/hooks/useVisuals.ts
./src/lib/mockData.ts
./src/lib/performanceCache.ts
./src/lib/reflections.ts
./src/lib/supabaseClient.ts
./src/types/index.js
./src/types/index.ts
./src/utils/index.ts
./tailwind.config.js

=== LOGOUT SEARCH MAIN ===
./src/contexts/AuthContext.tsx:27:  logout: () => Promise<AuthError>;
./src/contexts/AuthContext.tsx:62:    // Listen for changes in auth state (login, logout)
./src/contexts/AuthContext.tsx:141:  const logout = async (): Promise<AuthError> => {
./src/contexts/AuthContext.tsx:150:        router.push('/login'); // Redirect to login after successful logout
./src/contexts/AuthContext.tsx:155:      console.error('Unexpected error during logout:', error);
./src/contexts/AuthContext.tsx:165:    logout,
./src/components/Layout.tsx:24:  const { user, logout, loading } = useAuth();
./src/components/Layout.tsx:33:  // Handle logout
./src/components/Layout.tsx:37:      await logout();
./src/types/index.ts:280:  logout: () => Promise<void>;
./.next/static/chunks/app/layout.js:84:     * @param scope The logout sope.
./.next/static/chunks/app/layout.js:91:            await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_0__._request)(this.fetch, 'POST', `${this.url}/logout?scope=${scope}`, {
./.next/static/chunks/app/layout.js:11385:            // Listen for changes in auth state (login, logout)
./.next/static/chunks/app/layout.js:11458:    const logout = async ()=>{
./.next/static/chunks/app/layout.js:11467:                router.push('/login'); // Redirect to login after successful logout
./.next/static/chunks/app/layout.js:11474:            console.error('Unexpected error during logout:', error);
./.next/static/chunks/app/layout.js:11485:        logout
./.next/static/chunks/app/journal/page.js:1357:     * @param scope The logout sope.
./.next/static/chunks/app/journal/page.js:1364:            await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_0__._request)(this.fetch, 'POST', `${this.url}/logout?scope=${scope}`, {
./.next/static/webpack/app/layout.ae9de7a3375e2b7d.hot-update.js:448:            // Listen for changes in auth state (login, logout)
./.next/static/webpack/app/layout.ae9de7a3375e2b7d.hot-update.js:521:    const logout = async ()=>{
./.next/static/webpack/app/layout.ae9de7a3375e2b7d.hot-update.js:530:                router.push('/login'); // Redirect to login after successful logout
./.next/static/webpack/app/layout.ae9de7a3375e2b7d.hot-update.js:537:            console.error('Unexpected error during logout:', error);
./.next/static/webpack/app/layout.ae9de7a3375e2b7d.hot-update.js:548:        logout
./.next/static/webpack/app/layout.8ee38ebf18bfae66.hot-update.js:50:    const { user, logout, loading } = (0,_contexts_AuthContext__WEBPACK_IMPORTED_MODULE_4__.useAuth)();
./.next/static/webpack/app/layout.8ee38ebf18bfae66.hot-update.js:54:    // Handle logout
./.next/static/webpack/app/layout.8ee38ebf18bfae66.hot-update.js:58:            await logout();
./.next/static/webpack/app/layout.8ee38ebf18bfae66.hot-update.js:735:            // Listen for changes in auth state (login, logout)
./.next/static/webpack/app/layout.8ee38ebf18bfae66.hot-update.js:815:    const logout = async ()=>{
./.next/static/webpack/app/layout.8ee38ebf18bfae66.hot-update.js:824:                router.push('/login'); // Redirect to login after successful logout
./.next/static/webpack/app/layout.8ee38ebf18bfae66.hot-update.js:831:            console.error('Unexpected error during logout:', error);
./.next/static/webpack/app/layout.8ee38ebf18bfae66.hot-update.js:842:        logout
./.next/static/webpack/app/journal/page.ae9de7a3375e2b7d.hot-update.js:913:     * @param scope The logout sope.
./.next/static/webpack/app/journal/page.ae9de7a3375e2b7d.hot-update.js:920:            await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_0__._request)(this.fetch, 'POST', `${this.url}/logout?scope=${scope}`, {

=== useRouter SEARCH MAIN ===
./src/contexts/AuthContext.tsx:7:import { useRouter } from 'next/navigation';
./src/contexts/AuthContext.tsx:40:  const router = useRouter();
./src/hooks/useLogin.ts:7:import { useRouter } from 'next/navigation';
./src/hooks/useLogin.ts:16:  const router = useRouter();
./src/app/page.js:5:import { useRouter } from 'next/navigation';
./src/app/page.js:13:  const router = useRouter();
./src/app/dashboard/page.jsx:5:import { useRouter } from 'next/navigation';
./src/app/dashboard/page.jsx:12:  const router = useRouter();
./src/app/signup/page.js:7:import { useRouter } from 'next/navigation';
./src/app/signup/page.js:23:  const router = useRouter();
./src/app/login/page.js:8:import { useRouter, useSearchParams } from 'next/navigation';
./src/app/login/page.js:21:  const router = useRouter();
./src/app/book/page.js:6:import { useRouter } from 'next/navigation';
./src/app/book/page.js:13:  const router = useRouter();
./.next/static/webpack/app/layout.5a075d5d0b7aa059.hot-update.js:711:    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter)();
./.next/static/webpack/app/layout.5a075d5d0b7aa059.hot-update.js:857:        next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter
./.next/static/webpack/app/layout.ae9de7a3375e2b7d.hot-update.js:424:    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter)();
./.next/static/webpack/app/layout.ae9de7a3375e2b7d.hot-update.js:563:        next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter
./.next/static/webpack/app/layout.8ee38ebf18bfae66.hot-update.js:711:    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter)();
./.next/static/webpack/app/layout.8ee38ebf18bfae66.hot-update.js:857:        next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter
./.next/static/webpack/app/journal/page.b8242b6d5ae4a0a0.hot-update.js:66:    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter)();
./.next/static/webpack/app/journal/page.b8242b6d5ae4a0a0.hot-update.js:331:        next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter
./.next/static/webpack/app/journal/page.ae9de7a3375e2b7d.hot-update.js:26292:    const router = useRouter();

=== LOGOUT SEARCH TARGET ===
./src/contexts/AuthContext.tsx:27:  logout: () => Promise<AuthError>;
./src/contexts/AuthContext.tsx:62:    // Listen for changes in auth state (login, logout)
./src/contexts/AuthContext.tsx:132:  const logout = async (): Promise<AuthError> => {
./src/contexts/AuthContext.tsx:141:        router.push('/login'); // Redirect to login after successful logout
./src/contexts/AuthContext.tsx:146:      console.error('Unexpected error during logout:', error);
./src/contexts/AuthContext.tsx:156:    logout,
./src/types/index.ts:280:  logout: () => Promise<void>;
./.next/static/chunks/app/layout.js:84:     * @param scope The logout sope.
./.next/static/chunks/app/layout.js:91:            await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_0__._request)(this.fetch, 'POST', `${this.url}/logout?scope=${scope}`, {
./.next/static/chunks/app/layout.js:10986:    const { user, logout, loading } = (0,_contexts_AuthContext__WEBPACK_IMPORTED_MODULE_4__.useAuth)();
./.next/static/chunks/app/layout.js:10990:    // Handle logout
./.next/static/chunks/app/layout.js:10994:            await logout();
./.next/static/chunks/app/layout.js:11673:            // Listen for changes in auth state (login, logout)
./.next/static/chunks/app/layout.js:11753:    const logout = async ()=>{
./.next/static/chunks/app/layout.js:11762:                router.push('/login'); // Redirect to login after successful logout
./.next/static/chunks/app/layout.js:11769:            console.error('Unexpected error during logout:', error);
./.next/static/chunks/app/layout.js:11780:        logout
./.next/static/webpack/app/layout.5a075d5d0b7aa059.hot-update.js:50:    const { user, logout, loading } = (0,_contexts_AuthContext__WEBPACK_IMPORTED_MODULE_4__.useAuth)();
./.next/static/webpack/app/layout.5a075d5d0b7aa059.hot-update.js:54:    // Handle logout
./.next/static/webpack/app/layout.5a075d5d0b7aa059.hot-update.js:58:            await logout();
./.next/static/webpack/app/layout.5a075d5d0b7aa059.hot-update.js:735:            // Listen for changes in auth state (login, logout)
./.next/static/webpack/app/layout.5a075d5d0b7aa059.hot-update.js:815:    const logout = async ()=>{
./.next/static/webpack/app/layout.5a075d5d0b7aa059.hot-update.js:824:                router.push('/login'); // Redirect to login after successful logout
./.next/static/webpack/app/layout.5a075d5d0b7aa059.hot-update.js:831:            console.error('Unexpected error during logout:', error);
./.next/static/webpack/app/layout.5a075d5d0b7aa059.hot-update.js:842:        logout
./.next/static/webpack/app/layout.ae9de7a3375e2b7d.hot-update.js:448:            // Listen for changes in auth state (login, logout)
./.next/static/webpack/app/layout.ae9de7a3375e2b7d.hot-update.js:521:    const logout = async ()=>{
./.next/static/webpack/app/layout.ae9de7a3375e2b7d.hot-update.js:530:                router.push('/login'); // Redirect to login after successful logout
./.next/static/webpack/app/layout.ae9de7a3375e2b7d.hot-update.js:537:            console.error('Unexpected error during logout:', error);
./.next/static/webpack/app/layout.ae9de7a3375e2b7d.hot-update.js:548:        logout
./.next/static/webpack/app/layout.8ee38ebf18bfae66.hot-update.js:50:    const { user, logout, loading } = (0,_contexts_AuthContext__WEBPACK_IMPORTED_MODULE_4__.useAuth)();
./.next/static/webpack/app/layout.8ee38ebf18bfae66.hot-update.js:54:    // Handle logout
./.next/static/webpack/app/layout.8ee38ebf18bfae66.hot-update.js:58:            await logout();
./.next/static/webpack/app/layout.8ee38ebf18bfae66.hot-update.js:735:            // Listen for changes in auth state (login, logout)
./.next/static/webpack/app/layout.8ee38ebf18bfae66.hot-update.js:815:    const logout = async ()=>{
./.next/static/webpack/app/layout.8ee38ebf18bfae66.hot-update.js:824:                router.push('/login'); // Redirect to login after successful logout
./.next/static/webpack/app/layout.8ee38ebf18bfae66.hot-update.js:831:            console.error('Unexpected error during logout:', error);
./.next/static/webpack/app/layout.8ee38ebf18bfae66.hot-update.js:842:        logout
./.next/static/webpack/app/journal/page.ae9de7a3375e2b7d.hot-update.js:913:     * @param scope The logout sope.
./.next/static/webpack/app/journal/page.ae9de7a3375e2b7d.hot-update.js:920:            await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_0__._request)(this.fetch, 'POST', `${this.url}/logout?scope=${scope}`, {

=== useRouter SEARCH TARGET ===
./src/contexts/AuthContext.tsx:7:import { useRouter } from 'next/navigation';
./src/contexts/AuthContext.tsx:40:  const router = useRouter();
./src/hooks/useLogin.ts:7:import { useRouter } from 'next/navigation';
./src/hooks/useLogin.ts:16:  const router = useRouter();
./src/app/page.js:5:import { useRouter } from 'next/navigation';
./src/app/page.js:13:  const router = useRouter();
./src/app/dashboard/page.jsx:5:import { useRouter } from 'next/navigation';
./src/app/dashboard/page.jsx:12:  const router = useRouter();
./src/app/signup/page.js:7:import { useRouter } from 'next/navigation';
./src/app/signup/page.js:23:  const router = useRouter();
./src/app/login/page.js:8:import { useRouter } from 'next/navigation';
./src/app/login/page.js:21:  const router = useRouter();
./src/app/journal/page.js:28:  const router = useRouter()
./src/app/book/page.js:6:import { useRouter } from 'next/navigation';
./src/app/book/page.js:13:  const router = useRouter();
./.next/static/chunks/app/layout.js:11361:    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter)();
./.next/static/chunks/app/layout.js:11500:        next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter
./.next/static/chunks/app/journal/page.js:27123:    const router = useRouter();
./.next/static/webpack/app/layout.5a075d5d0b7aa059.hot-update.js:711:    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter)();
./.next/static/webpack/app/layout.5a075d5d0b7aa059.hot-update.js:857:        next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter
./.next/static/webpack/app/layout.ae9de7a3375e2b7d.hot-update.js:424:    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter)();
./.next/static/webpack/app/layout.ae9de7a3375e2b7d.hot-update.js:563:        next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter
./.next/static/webpack/app/layout.086d46f101bbbd9b.hot-update.js:424:    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter)();
./.next/static/webpack/app/layout.086d46f101bbbd9b.hot-update.js:563:        next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter
./.next/static/webpack/app/layout.8ee38ebf18bfae66.hot-update.js:711:    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter)();
./.next/static/webpack/app/layout.8ee38ebf18bfae66.hot-update.js:857:        next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter
./.next/static/webpack/app/journal/page.086d46f101bbbd9b.hot-update.js:26292:    const router = useRouter();
./.next/static/webpack/app/journal/page.b8242b6d5ae4a0a0.hot-update.js:66:    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter)();
./.next/static/webpack/app/journal/page.b8242b6d5ae4a0a0.hot-update.js:331:        next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter
./.next/static/webpack/app/journal/page.ae9de7a3375e2b7d.hot-update.js:26292:    const router = useRouter();

=== AUTH CONTEXT COMPARISON ===
--- MAIN AuthContext ---

// src/contexts/AuthContext.tsx
'use client'; // This context will be used by client components

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { supabase } from '@/lib/supabaseClient';
import { useRouter } from 'next/navigation';
import type { User } from '@/types';

// Auth result interfaces
interface AuthResult {
  user: User | null;
  session: any;
  error: any;
}

interface AuthError {
  error: any;
}

// Context interface
interface AuthContextValue {
  user: User | null;
  loading: boolean;
  signUp: (email: string, password: string) => Promise<AuthResult>;
  login: (email: string, password: string, redirectPath?: string) => Promise<AuthResult>;
  logout: () => Promise<AuthError>;
}

// Provider props interface
interface AuthProviderProps {
  children: ReactNode;
}

const AuthContext = createContext<AuthContextValue | null>(null);

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState<boolean>(true); // Start with loading true
  const router = useRouter();

  useEffect(() => {
    // Check for an existing session
    const getSession = async (): Promise<void> => {
      try {
        const { data, error } = await supabase.auth.getSession();
        if (error) {
          console.error("Error getting session:", error.message);
          setLoading(false);
          return;
        }
        setUser(data?.session?.user as User ?? null);
        setLoading(false);
      } catch (error) {
        console.error("Unexpected error getting session:", error);
        setLoading(false);
      }
    };

    getSession();

    // Listen for changes in auth state (login, logout)
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event: string, session: any) => {
        console.log('Auth event:', event, session);
        setUser(session?.user as User ?? null);
        setLoading(false); // Ensure loading is false after auth state change
        
        // Optional: Redirect based on event
        // if (event === 'SIGNED_IN') router.push('/book');
        // if (event === 'SIGNED_OUT') router.push('/');
      }
    );

    // Cleanup listener on component unmount
    return () => {
      subscription?.unsubscribe();
    };
  }, [router]); // Added router to dependency array

  // Signup function
  const signUp = async (email: string, password: string): Promise<AuthResult> => {
    setLoading(true);
    try {
      const { data, error } = await supabase.auth.signUp({ 
        email, 
        password 
      });
      setLoading(false);
      return { 
        user: data?.user as User ?? null, 
        session: data?.session ?? null, 
        error 
      };
    } catch (error) {
      setLoading(false);
      console.error('Error during signup:', error);
      return { 
        user: null, 
        session: null, 
        error 
      };
    }
  };

  // Login function with optional redirect
  const login = async (email: string, password: string, redirectPath?: string): Promise<AuthResult> => {
    setLoading(true);
    try {
      const { data, error } = await supabase.auth.signInWithPassword({ 
        email, 
        password 
      });
      
      if (!error && data?.user) {
        // Handle redirect after successful login
        const targetPath = redirectPath || '/dashboard';
        setTimeout(() => {
          router.push(targetPath);
        }, 500); // Small delay to show success state
      }
      
      setLoading(false);
      return { 
        user: data?.user as User ?? null, 
        session: data?.session ?? null, 
        error 
      };
    } catch (error) {
      setLoading(false);
      console.error('Error during login:', error);
      return { 
        user: null, 
        session: null, 
        error 
      };
    }
  };

  // Logout function
  const logout = async (): Promise<AuthError> => {
    setLoading(true);
    try {
      const { error } = await supabase.auth.signOut();
      setUser(null); // Clear user state immediately
      setLoading(false);
      if (error) {
        console.error('Error logging out:', error.message);
      } else {
        router.push('/login'); // Redirect to login after successful logout
      }
      return { error };
    } catch (error) {
      setLoading(false);
      console.error('Unexpected error during logout:', error);
      return { error };
    }
  };

  const value: AuthContextValue = {
    user,
    loading,
    signUp,
    login,
    logout,
  };

  // Don't render children until loading is false (initial session check is done)
  // Or show a loading spinner for the whole app
  return (
    <AuthContext.Provider value={value}>
      {/* We could show a global loading spinner here if `loading` is true */}
      {children}
    </AuthContext.Provider>
  );
};

// Custom hook to use the AuthContext
export const useAuth = (): AuthContextValue => {
  const context = useContext(AuthContext);
  if (context === undefined || context === null) { // Check for null as well
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

// Export types for other files to use
export type { AuthContextValue, AuthProviderProps, AuthResult, AuthError };

--- TARGET AuthContext ---

// src/contexts/AuthContext.tsx
'use client'; // This context will be used by client components

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { supabase } from '@/lib/supabaseClient';
import { useRouter } from 'next/navigation';
import type { User } from '@/types';

// Auth result interfaces
interface AuthResult {
  user: User | null;
  session: any;
  error: any;
}

interface AuthError {
  error: any;
}

// Context interface
interface AuthContextValue {
  user: User | null;
  loading: boolean;
  signUp: (email: string, password: string) => Promise<AuthResult>;
  login: (email: string, password: string) => Promise<AuthResult>;
  logout: () => Promise<AuthError>;
}

// Provider props interface
interface AuthProviderProps {
  children: ReactNode;
}

const AuthContext = createContext<AuthContextValue | null>(null);

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState<boolean>(true); // Start with loading true
  const router = useRouter();

  useEffect(() => {
    // Check for an existing session
    const getSession = async (): Promise<void> => {
      try {
        const { data, error } = await supabase.auth.getSession();
        if (error) {
          console.error("Error getting session:", error.message);
          setLoading(false);
          return;
        }
        setUser(data?.session?.user as User ?? null);
        setLoading(false);
      } catch (error) {
        console.error("Unexpected error getting session:", error);
        setLoading(false);
      }
    };

    getSession();

    // Listen for changes in auth state (login, logout)
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event: string, session: any) => {
        console.log('Auth event:', event, session);
        setUser(session?.user as User ?? null);
        setLoading(false); // Ensure loading is false after auth state change
        
        // Optional: Redirect based on event
        // if (event === 'SIGNED_IN') router.push('/book');
        // if (event === 'SIGNED_OUT') router.push('/');
      }
    );

    // Cleanup listener on component unmount
    return () => {
      subscription?.unsubscribe();
    };
  }, [router]); // Added router to dependency array

  // Signup function
  const signUp = async (email: string, password: string): Promise<AuthResult> => {
    setLoading(true);
    try {
      const { data, error } = await supabase.auth.signUp({ 
        email, 
        password 
      });
      setLoading(false);
      return { 
        user: data?.user as User ?? null, 
        session: data?.session ?? null, 
        error 
      };
    } catch (error) {
      setLoading(false);
      console.error('Error during signup:', error);
      return { 
        user: null, 
        session: null, 
        error 
      };
    }
  };

  // Login function
  const login = async (email: string, password: string): Promise<AuthResult> => {
    setLoading(true);
    try {
      const { data, error } = await supabase.auth.signInWithPassword({ 
        email, 
        password 
      });
      setLoading(false);
      return { 
        user: data?.user as User ?? null, 
        session: data?.session ?? null, 
        error 
      };
    } catch (error) {
      setLoading(false);
      console.error('Error during login:', error);
      return { 
        user: null, 
        session: null, 
        error 
      };
    }
  };

  // Logout function
  const logout = async (): Promise<AuthError> => {
    setLoading(true);
    try {
      const { error } = await supabase.auth.signOut();
      setUser(null); // Clear user state immediately
      setLoading(false);
      if (error) {
        console.error('Error logging out:', error.message);
      } else {
        router.push('/login'); // Redirect to login after successful logout
      }
      return { error };
    } catch (error) {
      setLoading(false);
      console.error('Unexpected error during logout:', error);
      return { error };
    }
  };

  const value: AuthContextValue = {
    user,
    loading,
    signUp,
    login,
    logout,
  };

  // Don't render children until loading is false (initial session check is done)
  // Or show a loading spinner for the whole app
  return (
    <AuthContext.Provider value={value}>
      {/* We could show a global loading spinner here if `loading` is true */}
      {children}
    </AuthContext.Provider>
  );
};

// Custom hook to use the AuthContext
export const useAuth = (): AuthContextValue => {
  const context = useContext(AuthContext);
  if (context === undefined || context === null) { // Check for null as well
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

// Export types for other files to use
export type { AuthContextValue, AuthProviderProps, AuthResult, AuthError };

=== LAYOUT COMPONENT COMPARISON ===
--- MAIN Layout ---

'use client';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { useEffect, useState, ReactNode } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { LoadingSpinner } from '@/components/LoadingSpinner';

// Define interfaces
interface LayoutProps {
  children: ReactNode;
}

interface Section {
  id: number;
  title: string;
  slug: string;
  order: number;
}

export default function Layout({ children }: LayoutProps): React.ReactElement {
  const pathname = usePathname();
  const [sections, setSections] = useState<Section[]>([]);
  const { user, logout, loading } = useAuth();
  const [isLoggingOut, setIsLoggingOut] = useState(false);

  // Check if current page should have full-screen layout (no sidebar)
  const isFullScreenPage = pathname === '/onboarding' || 
                           pathname === '/login' || 
                           pathname === '/signup' || 
                           pathname === '/forgot-password';

  // Handle logout
  const handleLogout = async () => {
    setIsLoggingOut(true);
    try {
      await logout();
    } catch (error) {
      console.error('Logout error:', error);
    } finally {
      setIsLoggingOut(false);
    }
  };

  useEffect(() => {
    // Only fetch sections if not on a full-screen page
    if (!isFullScreenPage) {
      // Mock sections data for now since we're making this client-side
      const mockSections: Section[] = [
        { id: 1, title: 'Prologue', slug: '00_prologue', order: 1 },
        { id: 2, title: 'Introduction Through Next Steps', slug: '01_intro_through_next_steps', order: 2 },
        { id: 3, title: 'Kingdom Government', slug: '02_kingdom_government', order: 3 },
        { id: 4, title: 'Elephant in the Kingdom', slug: '03_elephant_in_the_kingdom', order: 4 },
        { id: 5, title: 'Characteristics of Principles', slug: '04_characteristics_of_principles', order: 5 },
        { id: 6, title: 'Approved', slug: '05_approved', order: 6 },
        { id: 7, title: '30 Key Principles (01–10)', slug: '06_key_principles_01-10', order: 7 },
        { id: 8, title: '30 Key Principles (11–20)', slug: '06_key_principles_11-20', order: 8 },
        { id: 9, title: '30 Key Principles (21–30)', slug: '06_key_principles_21-30', order: 9 },
        { id: 10, title: 'Conclusion', slug: '07_conclusion', order: 10 }
      ];
      setSections(mockSections);
    }
  }, [isFullScreenPage]);

  // Full-screen layout for onboarding and auth pages
  if (isFullScreenPage) {
    return <>{children}</>;
  }

  return (
    <div 
      className="min-h-screen flex flex-col"
      style={{
        backgroundImage: 'url("https://images.pexels.com/photos/1531660/pexels-photo-1531660.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2")',
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        backgroundRepeat: 'no-repeat',
        backgroundAttachment: 'fixed'
      }}
    >
      <div className="flex flex-1">
        {/* Sacred Journey Sidebar with Stable Sacred Blue Background */}
        <aside className="w-72 bg-brand-blue-sidebar fixed top-0 left-0 h-full z-10 overflow-y-auto border-r border-sacred-blue-200 shadow-2xl">
          <div className="p-6">
            {/* Sacred Journey Header */}
            <div className="mb-8 text-center">
              <Link href="/" className="text-sacred-blue-900 font-serif text-2xl font-bold hover:text-sacred-gold-600 transition-colors duration-300">
                Renewed
              </Link>
              <p className="text-xs text-sacred-blue-700 font-sans mt-1 tracking-wider uppercase">THE NEW MAN STORY</p>
            </div>

            {/* Sacred Journey Navigation */}
            <nav>
              <ul className="space-y-2">
                <li>
                  <Link href="/dashboard" className="block py-3 px-4 rounded-lg text-sacred-blue-900 hover:bg-white/50 hover:text-sacred-blue-900 font-sans font-semibold text-base transition-all duration-300 border border-transparent hover:border-sacred-blue-300 hover:shadow-lg">
                    Dashboard
                  </Link>
                </li>
                <li>
                  <Link href="/journal" className="block py-3 px-4 rounded-lg text-sacred-blue-900 hover:bg-white/50 hover:text-sacred-blue-900 font-sans font-semibold text-base transition-all duration-300 border border-transparent hover:border-sacred-blue-300 hover:shadow-lg">
                    📖 Sacred Journal
                  </Link>
                </li>
                <li>
                  <Link href="/book" className="block py-3 px-4 rounded-lg text-sacred-blue-900 hover:bg-white/50 hover:text-sacred-blue-900 font-sans font-semibold text-base transition-all duration-300 border border-transparent hover:border-sacred-blue-300 hover:shadow-lg">
                    Guidebook Home
                  </Link>
                </li>
                
                {/* Sacred Divider */}
                <hr className="my-4 border-sacred-blue-300" />
                
                {/* Sections Header */}
                <h3 className="px-4 text-xs font-semibold text-sacred-blue-700 uppercase tracking-wider mb-2 font-sans">Sections</h3>
                
                {/* Dynamic Sections with Sacred Journey Styling */}
                {sections.map((section) => (
                  <li key={section.id}>
                    <Link href={`/book/${section.slug}`} className="block py-2 px-4 rounded-lg text-sacred-blue-800 hover:bg-white/50 hover:text-sacred-blue-900 font-sans text-sm transition-all duration-300 border border-transparent hover:border-sacred-blue-300 hover:shadow-md">
                      {section.title}
                    </Link>
                  </li>
                ))}
                
                {/* Sacred Divider */}
                <hr className="my-4 border-sacred-blue-300" />
                
                {/* Full Audiobook Link with Sacred Gold Accent */}
                <li>
                  <Link href="/full-audio-player" className="block py-3 px-4 rounded-lg text-sacred-blue-900 hover:bg-sacred-gold-200 hover:text-sacred-blue-900 font-sans font-semibold text-base transition-all duration-300 border border-sacred-gold-300 hover:border-sacred-gold-400 hover:shadow-lg bg-sacred-gold-100">
                    🎧 Full Audiobook
                  </Link>
                </li>
              </ul>
            </nav>

            {/* User Profile Section */}
            {user && (
              <div className="mt-8 pt-6 border-t border-sacred-blue-300">
                <div className="px-4 pb-4">
                  <div className="flex items-center space-x-3 mb-4">
                    <div className="h-10 w-10 bg-sacred-gold-200 rounded-full flex items-center justify-center">
                      <svg className="h-6 w-6 text-sacred-blue-900" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                      </svg>
                    </div>
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-sacred-blue-900 truncate">
                        {user.email}
                      </p>
                      <p className="text-xs text-sacred-blue-700">
                        Sacred Journey Member
                      </p>
                    </div>
                  </div>
                  
                  <button
                    onClick={handleLogout}
                    disabled={isLoggingOut}
                    className="w-full flex items-center justify-center px-4 py-2 text-sm font-medium text-sacred-blue-700 bg-white/50 border border-sacred-blue-300 rounded-lg hover:bg-red-50 hover:text-red-700 hover:border-red-300 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isLoggingOut ? (
                      <>
                        <LoadingSpinner size="sm" className="mr-2" />
                        Signing Out...
                      </>
                    ) : (
                      <>
                        <svg className="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                        </svg>
                        Sign Out
                      </>
                    )}
                  </button>
                </div>
              </div>
            )}
          </div>
        </aside>

        {/* Sacred Journey Main Content Area */}
        <main className="flex-1 ml-72 p-6 lg:p-10 overflow-y-auto">
          {/* Sacred Journey Content Container with Solid Background */}
          <div className="bg-white rounded-2xl shadow-xl p-6 sm:p-8 md:p-10 min-h-full">
            {children}
          </div>
        </main>
      </div>
    </div>
  );
}

// Export prop types
export type { LayoutProps, Section };

--- TARGET Layout ---

'use client';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { useEffect, useState, ReactNode } from 'react';

// Define interfaces
interface LayoutProps {
  children: ReactNode;
}

interface Section {
  id: number;
  title: string;
  slug: string;
  order: number;
}

export default function Layout({ children }: LayoutProps): React.ReactElement {
  const pathname = usePathname();
  const [sections, setSections] = useState<Section[]>([]);

  // Check if current page should have full-screen layout (no sidebar)
  const isFullScreenPage = pathname === '/onboarding' || 
                           pathname === '/login' || 
                           pathname === '/signup' || 
                           pathname === '/forgot-password';

  useEffect(() => {
    // Only fetch sections if not on a full-screen page
    if (!isFullScreenPage) {
      // Mock sections data for now since we're making this client-side
      const mockSections: Section[] = [
        { id: 1, title: 'Prologue', slug: '00_prologue', order: 1 },
        { id: 2, title: 'Introduction Through Next Steps', slug: '01_intro_through_next_steps', order: 2 },
        { id: 3, title: 'Kingdom Government', slug: '02_kingdom_government', order: 3 },
        { id: 4, title: 'Elephant in the Kingdom', slug: '03_elephant_in_the_kingdom', order: 4 },
        { id: 5, title: 'Characteristics of Principles', slug: '04_characteristics_of_principles', order: 5 },
        { id: 6, title: 'Approved', slug: '05_approved', order: 6 },
        { id: 7, title: '30 Key Principles (01–10)', slug: '06_key_principles_01-10', order: 7 },
        { id: 8, title: '30 Key Principles (11–20)', slug: '06_key_principles_11-20', order: 8 },
        { id: 9, title: '30 Key Principles (21–30)', slug: '06_key_principles_21-30', order: 9 },
        { id: 10, title: 'Conclusion', slug: '07_conclusion', order: 10 }
      ];
      setSections(mockSections);
    }
  }, [isFullScreenPage]);

  // Full-screen layout for onboarding and auth pages
  if (isFullScreenPage) {
    return <>{children}</>;
  }

  return (
    <div 
      className="min-h-screen flex flex-col"
      style={{
        backgroundImage: 'url("https://images.pexels.com/photos/1531660/pexels-photo-1531660.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2")',
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        backgroundRepeat: 'no-repeat',
        backgroundAttachment: 'fixed'
      }}
    >
      <div className="flex flex-1">
        {/* Sacred Journey Sidebar with Stable Sacred Blue Background */}
        <aside className="w-72 bg-brand-blue-sidebar fixed top-0 left-0 h-full z-10 overflow-y-auto border-r border-sacred-blue-200 shadow-2xl">
          <div className="p-6">
            {/* Sacred Journey Header */}
            <div className="mb-8 text-center">
              <Link href="/" className="text-sacred-blue-900 font-serif text-2xl font-bold hover:text-sacred-gold-600 transition-colors duration-300">
                Renewed
              </Link>
              <p className="text-xs text-sacred-blue-700 font-sans mt-1 tracking-wider uppercase">THE NEW MAN STORY</p>
            </div>

            {/* Sacred Journey Navigation */}
            <nav>
              <ul className="space-y-2">
                <li>
                  <Link href="/dashboard" className="block py-3 px-4 rounded-lg text-sacred-blue-900 hover:bg-white/50 hover:text-sacred-blue-900 font-sans font-semibold text-base transition-all duration-300 border border-transparent hover:border-sacred-blue-300 hover:shadow-lg">
                    Dashboard
                  </Link>
                </li>
                <li>
                  <Link href="/journal" className="block py-3 px-4 rounded-lg text-sacred-blue-900 hover:bg-white/50 hover:text-sacred-blue-900 font-sans font-semibold text-base transition-all duration-300 border border-transparent hover:border-sacred-blue-300 hover:shadow-lg">
                    📖 Sacred Journal
                  </Link>
                </li>
                <li>
                  <Link href="/book" className="block py-3 px-4 rounded-lg text-sacred-blue-900 hover:bg-white/50 hover:text-sacred-blue-900 font-sans font-semibold text-base transition-all duration-300 border border-transparent hover:border-sacred-blue-300 hover:shadow-lg">
                    Guidebook Home
                  </Link>
                </li>
                
                {/* Sacred Divider */}
                <hr className="my-4 border-sacred-blue-300" />
                
                {/* Sections Header */}
                <h3 className="px-4 text-xs font-semibold text-sacred-blue-700 uppercase tracking-wider mb-2 font-sans">Sections</h3>
                
                {/* Dynamic Sections with Sacred Journey Styling */}
                {sections.map((section) => (
                  <li key={section.id}>
                    <Link href={`/book/${section.slug}`} className="block py-2 px-4 rounded-lg text-sacred-blue-800 hover:bg-white/50 hover:text-sacred-blue-900 font-sans text-sm transition-all duration-300 border border-transparent hover:border-sacred-blue-300 hover:shadow-md">
                      {section.title}
                    </Link>
                  </li>
                ))}
                
                {/* Sacred Divider */}
                <hr className="my-4 border-sacred-blue-300" />
                
                {/* Full Audiobook Link with Sacred Gold Accent */}
                <li>
                  <Link href="/full-audio-player" className="block py-3 px-4 rounded-lg text-sacred-blue-900 hover:bg-sacred-gold-200 hover:text-sacred-blue-900 font-sans font-semibold text-base transition-all duration-300 border border-sacred-gold-300 hover:border-sacred-gold-400 hover:shadow-lg bg-sacred-gold-100">
                    🎧 Full Audiobook
                  </Link>
                </li>
              </ul>
            </nav>
          </div>
        </aside>

        {/* Sacred Journey Main Content Area */}
        <main className="flex-1 ml-72 p-6 lg:p-10 overflow-y-auto">
          {/* Sacred Journey Content Container with Solid Background */}
          <div className="bg-white rounded-2xl shadow-xl p-6 sm:p-8 md:p-10 min-h-full">
            {children}
          </div>
        </main>
      </div>
    </div>
  );
}

// Export prop types
export type { LayoutProps, Section };
