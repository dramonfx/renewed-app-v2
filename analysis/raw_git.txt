=== BRANCH LIST (with dates) ===
2025-06-18 fix/stabilize-main-branch
2025-06-18 stable-onboarding-flow-ui
2025-06-19 feature/global-ui-unification
2025-06-19 feature/sacred-journey-complete-aesthetic
2025-06-19 fix/onboarding-data-flow
2025-06-19 fix/onboarding-runtime-errors
2025-06-19 fix/remove-glassmorphism-readability
2025-06-19 sacred-journey-clean
2025-06-19 sacred-journey-final-design
2025-06-20 feature/immersive-section-player
2025-06-20 feature/new-audiobook-player
2025-06-20 feature/unify-onboarding-ui
2025-06-20 fix/audiobook-streaming
2025-06-20 fix/background-image-sync
2025-06-20 fix/restore-dashboard-layout
2025-06-21 feature/audio-engine
2025-06-21 feature/immersive-player-v2
2025-06-21 feature/rebuild-single-player
2025-06-22 dev/audio-logic-analysis
2025-06-22 dev/system-diagnosis
2025-06-22 feature/audio-system-overhaul
2025-06-22 feature/rebuild-full-player
2025-06-22 feature/robust-audio-engine
2025-06-22 fix/database-schema-mismatch
2025-06-22 fix/environment-setup
2025-06-23 feature/final-audio-overhaul
2025-06-23 feature/journal-restoration
2025-06-23 feature/journaling-workshop
2025-06-23 feature/unified-audio-player
2025-06-23 fix/bookmark-ux
2025-06-23 test/supabase-connection-proof
2025-06-24 dev/login-redirect-analysis
2025-06-24 feature/auth-flow-enhancements
2025-06-24 feature/complete-journal
2025-06-24 feature/journal-backend
2025-06-24 feature/typescript-migration
2025-06-24 fix/login-redirect
2025-06-25 fix/auth-redirect-loop
2025-06-26 feature/complete-journal-final
2025-06-26 feature/journal-no-auth-testing
2025-06-26 feature/merged-auth-final
2025-06-26 fix/journal-access-redirect
2025-06-26 fix/journal-auth-state
2025-06-26 fix/journal-rls-policy
2025-06-27 dev/source-code-analysis
2025-06-27 feature/local-journal-system
2025-06-27 feature/production-auth-system
2025-06-27 fix/journal-auth-final
2025-06-27 main
2025-06-28 feature/journal-ui-final

=== MAIN LOG (last 30 commits) ===
* 586868b feat: implement functional local journal system
* b96f71e ‚ú® COMPLETE: Sacred Journaling Workshop with localStorage
* 5b5d767 üîê Fix Sacred Journal authentication integration
* f57e9ee feat: Production-ready authentication system with sacred design
*   c56f19d Merge pull request #73 from dramonfx/feature/auth-flow-enhancements
|\  
| * 058c4b9 üöÄ Authentication Flow Stabilization & Enhancement
* |   3d27d51 Merge pull request #72 from dramonfx/feature/typescript-migration
|\ \  
| * \   313cbf8 Merge branch 'main' into feature/typescript-migration
| |\ \  
| |/ /  
|/| |   
* | |   0d2cefa Merge pull request #71 from dramonfx/feature/complete-journal
|\ \ \  
| |_|/  
|/| |   
| * | 659e7bc feat: Complete Sacred Journaling Workshop integration
|/| | 
| * | aa76901 Save current state before integration
| * | a62f992 feat: Complete Sacred Journaling Workshop backend implementation
| | * b7fd886 feat: Complete comprehensive TypeScript migration (85%+ codebase)
| |/  
|/|   
* |   ed022e0 Merge pull request #69 from dramonfx/feature/journaling-workshop
|\ \  
| * | 0f8b41a feat: Sacred Journaling Workshop with mindset discernment integration
| * | 275ee26 ‚ú® Complete Sacred Journaling Workshop with Mindset Discernment
| * | 2c10e94 feat: Sacred Journaling Workshop - Complete Authentication Fix & Two-Column Modal Redesign
| * | abd04d0 feat: Complete Sacred Journaling Workshop - Spiritual Transformation Tool
| |/  
* |   617ba42 Merge pull request #68 from dramonfx/fix/bookmark-ux
|\ \  
| |/  
|/|   
| * 38bd58e feat: implement context-aware bookmark system with working individual deletion
|/  
*   610e84e Merge pull request #67 from dramonfx/feature/unified-audio-player
|\  
| * b53d341 feat: Final UI/UX polish for UnifiedAudioPlayer
| * a88b64b feat: Implement unified audio player component
* | 873d64a Merge pull request #66 from dramonfx/feature/final-audio-overhaul
|\| 
| * 07b3121 feat: Complete FullAudiobookPlayer UI polish and bug fixes
| * a3a8b9c COMPLETE AUDIO SYSTEM OVERHAUL - Golden Snippet API Bridge Working
* | 83aa91f Add Supabase connection proof of concept test
|/  
*   339b071 Merge pull request #64 from dramonfx/feature/audio-engine
|\  
| * f4340e7 fix: resolve ESLint apostrophe errors for clean build
* | ea2b016 Update system file

=== TARGET LOG (last 30 commits) ===
* 168be20 ‚ú® COMPLETE: Sacred Journaling UI Transformation - Mindset-Aware Design
*   c56f19d Merge pull request #73 from dramonfx/feature/auth-flow-enhancements
|\  
| * 058c4b9 üöÄ Authentication Flow Stabilization & Enhancement
* |   3d27d51 Merge pull request #72 from dramonfx/feature/typescript-migration
|\ \  
| * \   313cbf8 Merge branch 'main' into feature/typescript-migration
| |\ \  
| |/ /  
|/| |   
* | |   0d2cefa Merge pull request #71 from dramonfx/feature/complete-journal
|\ \ \  
| |_|/  
|/| |   
| * | 659e7bc feat: Complete Sacred Journaling Workshop integration
|/| | 
| * | aa76901 Save current state before integration
| * | a62f992 feat: Complete Sacred Journaling Workshop backend implementation
| | * b7fd886 feat: Complete comprehensive TypeScript migration (85%+ codebase)
| |/  
|/|   
* |   ed022e0 Merge pull request #69 from dramonfx/feature/journaling-workshop
|\ \  
| * | 0f8b41a feat: Sacred Journaling Workshop with mindset discernment integration
| * | 275ee26 ‚ú® Complete Sacred Journaling Workshop with Mindset Discernment
| * | 2c10e94 feat: Sacred Journaling Workshop - Complete Authentication Fix & Two-Column Modal Redesign
| * | abd04d0 feat: Complete Sacred Journaling Workshop - Spiritual Transformation Tool
| |/  
* |   617ba42 Merge pull request #68 from dramonfx/fix/bookmark-ux
|\ \  
| |/  
|/|   
| * 38bd58e feat: implement context-aware bookmark system with working individual deletion
|/  
*   610e84e Merge pull request #67 from dramonfx/feature/unified-audio-player
|\  
| * b53d341 feat: Final UI/UX polish for UnifiedAudioPlayer
| * a88b64b feat: Implement unified audio player component
* | 873d64a Merge pull request #66 from dramonfx/feature/final-audio-overhaul
|\| 
| * 07b3121 feat: Complete FullAudiobookPlayer UI polish and bug fixes
| * a3a8b9c COMPLETE AUDIO SYSTEM OVERHAUL - Golden Snippet API Bridge Working
* | 83aa91f Add Supabase connection proof of concept test
|/  
*   339b071 Merge pull request #64 from dramonfx/feature/audio-engine
|\  
| * f4340e7 fix: resolve ESLint apostrophe errors for clean build
* | ea2b016 Update system file
* |   c043d19 Merge pull request #63 from dramonfx/feature/rebuild-full-player
|\ \  
| * | e393dbe feat: rebuild FullAudiobookPlayer as pure UI component
|/ /  
* | f941e3e Merge pull request #62 from dramonfx/feature/audio-engine
|\| 

=== DIVERGENCE POINT ===
c56f19deff41c13b74224828e905cf3a1b2502a5

=== COMMITS IN MAIN NOT IN TARGET ===
586868b feat: implement functional local journal system
b96f71e ‚ú® COMPLETE: Sacred Journaling Workshop with localStorage
5b5d767 üîê Fix Sacred Journal authentication integration
f57e9ee feat: Production-ready authentication system with sacred design

=== COMMITS IN TARGET NOT IN MAIN ===
168be20 ‚ú® COMPLETE: Sacred Journaling UI Transformation - Mindset-Aware Design

=== DIFF STAT ===
 .abacus.donotdelete                                |   2 +-
 dev-server.log                                     |  19 -
 dev.log                                            |  42 +-
 middleware.js                                      |  70 ---
 src/app/forgot-password/page.js                    | 220 +++++-----
 src/app/journal/page.js                            | 336 ++++++++-------
 src/app/login/page.js                              |   8 +-
 src/app/test-journal-system/page.js                |   2 +-
 src/app/workshop/layout.js                         |  28 --
 src/app/workshop/page.js                           |  10 -
 src/components/Layout.tsx                          |  59 ---
 src/components/journal/JournalHeader.jsx           |  74 +++-
 src/components/journal/MindsetDiscernmentCards.jsx | 185 ++++++++
 src/components/journal/NewJournalEntry.jsx         | 133 +-----
 src/components/journal/SacredJournalEntry.jsx      | 371 ++++++++++++++++
 src/contexts/AuthContext.tsx                       |  15 +-
 src/hooks/useLogin.ts                              |   2 +-
 src/lib/journalStorage.js                          | 472 ---------------------
 yarn.lock                                          |  55 ++-
 19 files changed, 986 insertions(+), 1117 deletions(-)

=== FULL DIFF ===
diff --git a/.abacus.donotdelete b/.abacus.donotdelete
index fdef63a..6621005 100644
--- a/.abacus.donotdelete
+++ b/.abacus.donotdelete
@@ -1 +1 @@

\ No newline at end of file

\ No newline at end of file
diff --git a/dev-server.log b/dev-server.log
deleted file mode 100644
index 487619e..0000000
--- a/dev-server.log
+++ /dev/null
@@ -1,19 +0,0 @@
-
-> renewed-app-v2@0.1.0 dev
-> next dev
-
-   Loading config from /home/ubuntu/renewed-app-v2/next.config.mjs
-   Loading config from /home/ubuntu/renewed-app-v2/next.config.mjs
-   ‚ñ≤ Next.js 15.3.2
-   - Local:        http://localhost:3000
-   - Network:      http://100.96.53.40:3000
-   - Environments: .env.local
-
- ‚úì Starting...
-   Loading config from /home/ubuntu/renewed-app-v2/next.config.mjs
-   Loading config from /home/ubuntu/renewed-app-v2/next.config.mjs
- ‚úì Ready in 2s
- ‚óã Compiling /dashboard ...
- ‚úì Compiled /dashboard in 5.4s (1697 modules)
- HEAD /dashboard 200 in 5803ms
- ‚úì Compiled in 638ms (778 modules)
diff --git a/dev.log b/dev.log
index d611be8..0fdefe4 100644
--- a/dev.log
+++ b/dev.log
@@ -7,10 +7,48 @@
    Loading config from /home/ubuntu/renewed-app-v2/next.config.mjs
    ‚ñ≤ Next.js 15.3.2
    - Local:        http://localhost:3001
-   - Network:      http://100.108.158.85:3001
+   - Network:      http://100.124.254.34:3001
    - Environments: .env.local
 
  ‚úì Starting...
    Loading config from /home/ubuntu/renewed-app-v2/next.config.mjs
    Loading config from /home/ubuntu/renewed-app-v2/next.config.mjs
- ‚úì Ready in 2.3s
+ ‚úì Ready in 3.3s
+ ‚óã Compiling / ...
+ ‚úì Compiled / in 6.4s (1695 modules)
+ GET / 200 in 7072ms
+ ‚úì Compiled in 702ms (777 modules)
+ ‚óã Compiling /favicon.ico ...
+ ‚úì Compiled /favicon.ico in 609ms (934 modules)
+ GET /favicon.ico 200 in 740ms
+ ‚óã Compiling /journal ...
+ ‚úì Compiled /journal in 1796ms (2126 modules)
+ GET /journal 200 in 1992ms
+ GET /journal 200 in 54ms
+ GET /favicon.ico 200 in 28ms
+ ‚úì Compiled /login in 445ms (2139 modules)
+ GET /login 200 in 497ms
+ GET /favicon.ico 200 in 18ms
+ GET /login 200 in 58ms
+ GET /favicon.ico 200 in 28ms
+ GET /login 200 in 63ms
+ GET /favicon.ico 200 in 17ms
+ ‚úì Compiled /signup in 496ms (2146 modules)
+ GET /signup 200 in 594ms
+ GET /favicon.ico 200 in 19ms
+ GET / 200 in 58ms
+ GET /login 200 in 53ms
+ GET /signup 200 in 53ms
+ GET /journal 200 in 53ms
+ GET / 200 in 53ms
+ GET /favicon.ico 200 in 14ms
+ ‚ö† Cross origin request detected from 8a826a1cb-3001.preview.abacusai.app to /_next/* resource. In a future major version of Next.js, you will need to explicitly configure "allowedDevOrigins" in next.config to allow this.
+Read more: https://nextjs.org/docs/app/api-reference/config/next-config-js/allowedDevOrigins
+ GET /journal 200 in 50ms
+ GET /login 200 in 20ms
+ GET /login 200 in 18ms
+ ‚óã Compiling /book ...
+ ‚úì Compiled /book in 861ms (2132 modules)
+ GET /book 200 in 970ms
+ GET /book 200 in 17ms
+ GET /journal 200 in 35ms
diff --git a/middleware.js b/middleware.js
deleted file mode 100644
index 9b8447f..0000000
--- a/middleware.js
+++ /dev/null
@@ -1,70 +0,0 @@
-import { NextResponse } from 'next/server'
-import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
-
-export async function middleware(req) {
-  console.log('Middleware running for path:', req.nextUrl.pathname)
-  
-  const { pathname } = req.nextUrl
-  const res = NextResponse.next()
-  
-  // Define protected routes that require authentication
-  const protectedRoutes = [
-    '/dashboard',
-    '/book',
-    '/onboarding',
-    '/full-audio-player',
-    '/workshop'
-  ]
-
-  // Check if current path is protected
-  const isProtectedRoute = protectedRoutes.some(route => 
-    pathname === route || pathname.startsWith(route + '/')
-  )
-
-  if (isProtectedRoute) {
-    try {
-      // Create Supabase client for middleware
-      const supabase = createMiddlewareClient({ req, res })
-      
-      // Check if user is authenticated
-      const { data: { session }, error } = await supabase.auth.getSession()
-      
-      if (error) {
-        console.error('Error checking session in middleware:', error)
-      }
-      
-      // If no session, redirect to login with return URL
-      if (!session) {
-        console.log(`No session found, redirecting ${pathname} to login`)
-        const redirectUrl = req.nextUrl.clone()
-        redirectUrl.pathname = '/login'
-        redirectUrl.searchParams.set('returnUrl', pathname)
-        return NextResponse.redirect(redirectUrl)
-      }
-      
-      console.log(`User authenticated, allowing access to ${pathname}`)
-    } catch (error) {
-      console.error('Error in middleware auth check:', error)
-      // On error, redirect to login for safety
-      const redirectUrl = req.nextUrl.clone()
-      redirectUrl.pathname = '/login'
-      redirectUrl.searchParams.set('returnUrl', pathname)
-      return NextResponse.redirect(redirectUrl)
-    }
-  }
-
-  return res
-}
-
-export const config = {
-  matcher: [
-    /*
-     * Match all request paths except for the ones starting with:
-     * - _next/static (static files)
-     * - _next/image (image optimization files)
-     * - favicon.ico (favicon file)
-     * - public files (public folder)
-     */
-    '/((?!_next/static|_next/image|favicon.ico|public).*)',
-  ],
-}
diff --git a/src/app/forgot-password/page.js b/src/app/forgot-password/page.js
index bb835cf..12b2ef5 100644
--- a/src/app/forgot-password/page.js
+++ b/src/app/forgot-password/page.js
@@ -11,104 +11,93 @@ import SacredInput from '@/components/ui/sacred-input';
 
 export default function ForgotPasswordPage() {
   const [email, setEmail] = useState('');
-  const [isLoading, setIsLoading] = useState(false);
-  const [message, setMessage] = useState('');
+  const [loading, setLoading] = useState(false);
+  const [success, setSuccess] = useState(false);
   const [error, setError] = useState('');
-  const [isSuccess, setIsSuccess] = useState(false);
+  const [emailError, setEmailError] = useState('');
 
+  // Email validation function
   const validateEmail = (email) => {
     const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
     return emailRegex.test(email);
   };
 
-  const handleSubmit = async (e) => {
+  // Handle form submission
+  const handleForgotPassword = async (e) => {
     e.preventDefault();
+    
+    // Reset previous states
     setError('');
-    setMessage('');
+    setEmailError('');
+    setSuccess(false);
 
+    // Validate email
     if (!email.trim()) {
-      setError('Email address is required');
+      setEmailError('Email address is required');
       return;
     }
 
     if (!validateEmail(email)) {
-      setError('Please enter a valid email address');
+      setEmailError('Please enter a valid email address');
       return;
     }
 
-    setIsLoading(true);
+    setLoading(true);
 
     try {
-      const { error: resetError } = await supabase.auth.resetPasswordForEmail(email, {
-        redirectTo: `${window.location.origin}/reset-password`,
+      const { error } = await supabase.auth.resetPasswordForEmail(email, {
+        redirectTo: `${window.location.origin}/login`
       });
 
-      if (resetError) {
-        if (resetError.message.includes('rate limit')) {
-          setError('Too many reset attempts. Please wait before trying again.');
-        } else {
-          setError('Unable to send reset email. Please try again or contact support.');
-        }
-      } else {
-        setIsSuccess(true);
-        setMessage('Check your email for a password reset link. The link will expire in 24 hours.');
-        setEmail('');
+      if (error) {
+        throw error;
       }
-    } catch (err) {
-      console.error('Password reset error:', err);
-      setError('An unexpected error occurred. Please try again.');
-    } finally {
-      setIsLoading(false);
-    }
-  };
 
-  const handleEmailChange = (e) => {
-    setEmail(e.target.value);
-    if (error) {
-      setError('');
+      // Show success message regardless of whether email exists (security best practice)
+      setSuccess(true);
+      setEmail(''); // Clear the form
+    } catch (error) {
+      console.error('Password reset error:', error);
+      setError('Something went wrong. Please try again later.');
+    } finally {
+      setLoading(false);
     }
   };
 
   return (
-    <div className="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
-      <div className="max-w-md w-full space-y-8">
+    <div className="min-h-screen flex items-center justify-center p-4">
+      <div className="w-full max-w-md">
         {/* Header */}
-        <div className="text-center">
+        <div className="text-center mb-8">
           <div className="mx-auto h-16 w-16 sacred-icon-bg mb-6">
-            <svg className="h-8 w-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
+            <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
               <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
             </svg>
           </div>
-          <h2 className="text-3xl font-serif font-bold text-sacred mb-2">
-            Reset Password
-          </h2>
-          <p className="text-sacred-muted">
-            Enter your email address and we&apos;ll send you a link to reset your password
+          <h1 className="text-3xl font-serif font-bold text-sacred mb-2">
+            Forgot Password?
+          </h1>
+          <p className="text-sacred-muted text-sm leading-relaxed">
+            No worries! Enter your email address and we&apos;ll send you a link to reset your password.
           </p>
         </div>
 
-        {/* Reset Form */}
-        <SacredCard variant="heavy" className="p-8 relative">
-          {/* Loading Overlay */}
-          {isLoading && (
-            <div className="absolute inset-0 bg-white/80 backdrop-blur-sm flex items-center justify-center rounded-2xl z-10">
-              <div className="flex flex-col items-center space-y-3">
-                <LoadingSpinner size="lg" className="text-sacred-blue-500" />
-                <p className="text-sm text-sacred-blue-600 font-medium">Sending reset link...</p>
-              </div>
-            </div>
-          )}
-
+        {/* Main Card */}
+        <SacredCard variant="heavy" className="p-8 mb-6">
           {/* Success Message */}
-          {isSuccess && message && (
+          {success && (
             <div className="mb-6 sacred-success">
-              <div className="flex items-start">
-                <svg className="h-5 w-5 text-green-600 mr-3 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
-                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
+              <div className="flex items-center">
+                <svg className="w-5 h-5 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
+                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                 </svg>
                 <div>
-                  <p className="font-medium text-green-800">Email sent successfully!</p>
-                  <p className="text-sm text-green-700 mt-1">{message}</p>
+                  <p className="font-medium text-green-800">
+                    Reset link sent!
+                  </p>
+                  <p className="text-green-700 text-xs mt-1">
+                    If an account with that email exists, a password reset link has been sent. Please check your inbox and spam folder.
+                  </p>
                 </div>
               </div>
             </div>
@@ -117,75 +106,70 @@ export default function ForgotPasswordPage() {
           {/* Error Message */}
           {error && (
             <div className="mb-6 sacred-error-message">
-              <div className="flex items-start">
-                <svg className="h-5 w-5 text-red-600 mt-0.5 mr-3 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
-                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
-                </svg>
-                <p>{error}</p>
-              </div>
-            </div>
-          )}
-
-          {!isSuccess ? (
-            <form onSubmit={handleSubmit} className="space-y-6">
-              {/* Email Field */}
-              <SacredInput
-                label="Email Address"
-                type="email"
-                value={email}
-                onChange={handleEmailChange}
-                placeholder="Enter your email address"
-                autoComplete="email"
-                required
-              />
-
-              {/* Submit Button */}
-              <SacredButton
-                type="submit"
-                variant="gold"
-                size="lg"
-                disabled={isLoading}
-                loading={isLoading}
-                className="w-full"
-              >
-                Send Reset Link
-              </SacredButton>
-            </form>
-          ) : (
-            <div className="space-y-6">
-              {/* Resend Button */}
-              <SacredButton
-                onClick={() => {
-                  setIsSuccess(false);
-                  setMessage('');
-                }}
-                variant="outline"
-                size="lg"
-                className="w-full"
-              >
-                Send Another Reset Link
-              </SacredButton>
+              <p className="font-medium">{error}</p>
             </div>
           )}
 
-          {/* Footer */}
-          <div className="mt-8 text-center">
-            <p className="text-sm text-sacred-blue-600">
-              Remember your password?{' '}
-              <Link 
-                href="/login" 
-                className="font-semibold text-sacred-blue-700 hover:text-sacred-blue-800 underline transition-colors duration-200"
+          {/* Form */}
+          <form onSubmit={handleForgotPassword} className="space-y-6">
+            <SacredInput
+              label="Email Address"
+              type="email"
+              value={email}
+              onChange={(e) => {
+                setEmail(e.target.value);
+                if (emailError) setEmailError('');
+              }}
+              error={emailError}
+              placeholder="Enter your email address"
+              disabled={loading}
+              required
+            />
+
+            <SacredButton
+              type="submit"
+              variant="primary"
+              size="lg"
+              disabled={loading}
+              loading={loading}
+              className="w-full"
+            >
+              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
+                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
+              </svg>
+              Send Reset Link
+            </SacredButton>
+          </form>
+
+          {/* Navigation Links */}
+          <div className="mt-8 text-center space-y-3">
+            <Link
+              href="/login"
+              className="inline-flex items-center text-sm text-sacred-blue-600 hover:text-sacred-blue-700 transition-colors duration-200"
+            >
+              <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
+                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
+              </svg>
+              Back to Login
+            </Link>
+            
+            <div className="text-sm text-sacred-blue-600">
+              Don&apos;t have an account?{' '}
+              <Link
+                href="/signup"
+                className="text-sacred-blue-700 hover:text-sacred-blue-800 font-medium transition-colors duration-200"
               >
-                Back to Sign In
+                Sign up here
               </Link>
-            </p>
+            </div>
           </div>
         </SacredCard>
 
-        {/* Additional Help */}
+        {/* Additional Help Text */}
         <div className="text-center">
-          <p className="text-xs text-sacred-muted">
-            Didn&apos;t receive the email? Check your spam folder or contact support.
+          <p className="text-xs text-sacred-muted leading-relaxed">
+            Having trouble? The reset link will expire in 24 hours for security reasons.
+            If you don&apos;t receive an email, please check your spam folder or try again.
           </p>
         </div>
       </div>
diff --git a/src/app/journal/page.js b/src/app/journal/page.js
index e3b5d2d..75a8513 100644
--- a/src/app/journal/page.js
+++ b/src/app/journal/page.js
@@ -1,98 +1,120 @@
-
 'use client'
 
 import { useState, useEffect } from 'react'
+import { motion } from 'framer-motion'
+import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
 import JournalHeader from '@/components/journal/JournalHeader'
 import JournalEntryList from '@/components/journal/JournalEntryList'
-import NewJournalEntry from '@/components/journal/NewJournalEntry'
+import SacredJournalEntry from '@/components/journal/SacredJournalEntry'
 import JournalEntryModal from '@/components/journal/JournalEntryModal'
-import { LoadingSpinner } from '@/components/LoadingSpinner'
-import journalStorage from '@/lib/journalStorage'
+import { SparklesIcon } from '@heroicons/react/24/outline'
+
 
 export default function JournalPage() {
   const [entries, setEntries] = useState([])
   const [stats, setStats] = useState({})
-  const [entriesLoading, setEntriesLoading] = useState(true)
+  const [loading, setLoading] = useState(true)
   const [error, setError] = useState('')
   const [showNewEntry, setShowNewEntry] = useState(false)
   const [selectedEntry, setSelectedEntry] = useState(null)
+  const [user, setUser] = useState(null)
   const [filters, setFilters] = useState({
     mindset: '',
     reflectionType: '',
     search: ''
   })
-  const [storageAvailable, setStorageAvailable] = useState(true)
+  
+  const supabase = createClientComponentClient()
+  const router = useRouter()
 
-  // Load journal entries from localStorage
-  const loadEntries = () => {
-    setEntriesLoading(true)
-    setError('')
+  // Check authentication and load user
+  useEffect(() => {
+    const checkAuth = async () => {
+      const { data: { user }, error } = await supabase.auth.getUser()
+      if (error || !user) {
+        router.push('/login')
+        return
+      }
+      setUser(user)
+    }
+    checkAuth()
+  }, [supabase, router])
 
+  // Load journal entries
+  const loadEntries = async () => {
+    if (!user) return
+    
+    setLoading(true)
+    setError('')
+    
     try {
-      // Create filter object compatible with journalStorage
-      const storageFilters = {
-        mindset: filters.mindset,
-        reflection_type: filters.reflectionType,
-        search: filters.search
+      const params = new URLSearchParams()
+      if (filters.mindset) params.append('mindset', filters.mindset)
+      if (filters.reflectionType) params.append('reflection_type', filters.reflectionType)
+      if (filters.search) params.append('search', filters.search)
+      
+      const response = await fetch(`/api/journal?${params.toString()}`)
+      const data = await response.json()
+      
+      if (!response.ok) {
+        throw new Error(data.error || 'Failed to load entries')
       }
-
-      const loadedEntries = journalStorage.getEntries(storageFilters)
-      setEntries(loadedEntries)
+      
+      setEntries(data.entries || [])
     } catch (error) {
       console.error('Error loading entries:', error)
       setError(error.message)
-      setStorageAvailable(false)
     } finally {
-      setEntriesLoading(false)
+      setLoading(false)
     }
   }
 
-  // Load journal statistics from localStorage
-  const loadStats = () => {
+  // Load journal statistics
+  const loadStats = async () => {
+    if (!user) return
+    
     try {
-      const loadedStats = journalStorage.getStats()
-      setStats(loadedStats)
+      const response = await fetch('/api/journal/stats')
+      const data = await response.json()
+      
+      if (response.ok) {
+        setStats(data.stats || {})
+      }
     } catch (error) {
       console.error('Error loading stats:', error)
       // Don't show error for stats, it's not critical
     }
   }
 
-  // Check storage availability on mount
-  useEffect(() => {
-    try {
-      const testKey = '__sacred_journal_test__'
-      localStorage.setItem(testKey, 'test')
-      localStorage.removeItem(testKey)
-      setStorageAvailable(true)
-    } catch (error) {
-      setStorageAvailable(false)
-      setError('localStorage is not available. Please enable it in your browser settings.')
-    }
-  }, [])
-
-  // Load entries and stats when component mounts or filters change
+  // Load entries and stats when user is available or filters change
   useEffect(() => {
-    if (storageAvailable) {
+    if (user) {
       loadEntries()
       loadStats()
     }
-  }, [filters, storageAvailable])
+  }, [user, filters])
 
   // Handle new entry creation
   const handleNewEntry = async (entryData) => {
     try {
-      const newEntry = journalStorage.createEntry(entryData)
-
-      // Update local state immediately
-      setEntries(prev => [newEntry, ...prev])
-      loadStats() // Refresh stats
+      const response = await fetch('/api/journal', {
+        method: 'POST',
+        headers: {
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify(entryData),
+      })
+      
+      const data = await response.json()
+      
+      if (!response.ok) {
+        throw new Error(data.error || 'Failed to create entry')
+      }
+      
+      // Add new entry to the list and refresh stats
+      setEntries(prev => [data.entry, ...prev])
+      loadStats()
       setShowNewEntry(false)
-
-      // Clear any saved draft since we successfully saved
-      journalStorage.clearDraft()
-
-      return newEntry
     } catch (error) {
       console.error('Error creating entry:', error)
       throw error // Re-throw to let the form handle it
@@ -102,16 +124,26 @@ export default function JournalPage() {
   // Handle entry update
   const handleUpdateEntry = async (id, entryData) => {
     try {
-      const updatedEntry = journalStorage.updateEntry(id, entryData)
-
-      // Update entry in the list
-      setEntries(prev => prev.map(entry =>
-        entry.id === id ? updatedEntry : entry
+      const response = await fetch(`/api/journal/${id}`, {
+        method: 'PUT',
+        headers: {
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify(entryData),
+      })
+      
+      const data = await response.json()
+      
+      if (!response.ok) {
+        throw new Error(data.error || 'Failed to update entry')
+      }
+      
+      // Update entry in the list and refresh stats
+      setEntries(prev => prev.map(entry => 
+        entry.id === id ? data.entry : entry
       ))
-      loadStats() // Refresh stats
+      loadStats()
       setSelectedEntry(null)
-
-      return updatedEntry
     } catch (error) {
       console.error('Error updating entry:', error)
       throw error
@@ -123,13 +155,20 @@ export default function JournalPage() {
     if (!confirm('Are you sure you want to delete this reflection? This action cannot be undone.')) {
       return
     }
-
+    
     try {
-      journalStorage.deleteEntry(id)
-
-      // Remove entry from the list
+      const response = await fetch(`/api/journal/${id}`, {
+        method: 'DELETE',
+      })
+      
+      if (!response.ok) {
+        const data = await response.json()
+        throw new Error(data.error || 'Failed to delete entry')
+      }
+      
+      // Remove entry from the list and refresh stats
       setEntries(prev => prev.filter(entry => entry.id !== id))
-      loadStats() // Refresh stats
+      loadStats()
       setSelectedEntry(null)
     } catch (error) {
       console.error('Error deleting entry:', error)
@@ -142,107 +181,100 @@ export default function JournalPage() {
     setFilters(prev => ({ ...prev, ...newFilters }))
   }
 
-  // Handle data export
-  const handleExportData = () => {
-    try {
-      const exportData = journalStorage.exportData()
-      const blob = new Blob([JSON.stringify(exportData, null, 2)], {
-        type: 'application/json' 
-      })
-      const url = URL.createObjectURL(blob)
-      const a = document.createElement('a')
-      a.href = url
-      a.download = `sacred-journal-export-${new Date().toISOString().split('T')[0]}.json`
-      document.body.appendChild(a)
-      a.click()
-      document.body.removeChild(a)
-      URL.revokeObjectURL(url)
-    } catch (error) {
-      alert('Failed to export data: ' + error.message)
-    }
-  }
-
-  // Show error if storage is not available
-  if (!storageAvailable) {
+  if (!user) {
     return (
       <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 flex items-center justify-center">
-        <div className="max-w-md mx-auto text-center p-8 bg-white rounded-lg shadow-lg">
-          <div className="text-red-500 mb-4">
-            <svg className="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
-              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 18.5c-.77.833.192 2.5 1.732 2.5z" />
-            </svg>
-          </div>
-          <h2 className="text-xl font-semibold text-gray-900 mb-2">Storage Not Available</h2>
-          <p className="text-gray-600 mb-4">
-            Sacred Journal requires localStorage to save your reflections. Please enable localStorage in your browser settings and refresh the page.
-          </p>
-          <button
-            onClick={() => window.location.reload()}
-            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
-          >
-            Refresh Page
-          </button>
+        <div className="text-center">
+          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
+          <p className="text-gray-600">Loading your sacred space...</p>
         </div>
       </div>
     )
   }
 
-  // Show loading state
-  if (entriesLoading) {
-    return (
-      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 flex items-center justify-center">
-        <LoadingSpinner />
-      </div>
-    )
-  }
-
   return (
-    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50">
-      <div className="max-w-6xl mx-auto px-4 py-8">
-        <JournalHeader
-          entries={entries}
-          stats={stats}
-          filters={filters}
-          onFilterChange={handleFilterChange}
-          onNewEntry={() => setShowNewEntry(true)}
-          onExportData={handleExportData}
-        />
+    <div className="min-h-screen relative">
+      {/* Sacred Background Overlay */}
+      <div className="absolute inset-0 bg-gradient-to-br from-blue-900/5 via-indigo-900/3 to-purple-900/5 pointer-events-none"></div>
+      
+      <motion.div 
+        initial={{ opacity: 0, y: 20 }}
+        animate={{ opacity: 1, y: 0 }}
+        transition={{ duration: 0.6 }}
+        className="relative z-10"
+      >
+        <div className="max-w-6xl mx-auto px-4 py-8">
+          {/* Sacred Header with Enhanced Styling */}
+          <motion.div
+            initial={{ y: -20, opacity: 0 }}
+            animate={{ y: 0, opacity: 1 }}
+            transition={{ delay: 0.2, duration: 0.5 }}
+          >
+            <JournalHeader 
+              entries={entries}
+              stats={stats}
+              filters={filters}
+              onFilterChange={handleFilterChange}
+              onNewEntry={() => setShowNewEntry(true)}
+            />
+          </motion.div>
 
-        {error && (
-          <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
-            <p className="text-red-800">{error}</p>
-            <button
-              onClick={loadEntries}
-              className="mt-2 text-red-600 hover:text-red-800 font-medium"
+          {/* Enhanced Error Display */}
+          {error && (
+            <motion.div
+              initial={{ x: -20, opacity: 0 }}
+              animate={{ x: 0, opacity: 1 }}
+              className="bg-red-50/90 backdrop-blur-sm border border-red-200 rounded-xl p-6 mb-6 shadow-lg"
             >
-              Try Again
-            </button>
-          </div>
-        )}
+              <div className="flex items-center space-x-3">
+                <div className="w-10 h-10 bg-red-100 rounded-full flex items-center justify-center">
+                  <SparklesIcon className="w-5 h-5 text-red-600" />
+                </div>
+                <div>
+                  <p className="text-red-800 font-medium">Something went amiss in your sacred space</p>
+                  <p className="text-red-600 text-sm mt-1">{error}</p>
+                </div>
+              </div>
+              <button 
+                onClick={loadEntries}
+                className="mt-4 px-4 py-2 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition-colors font-medium"
+              >
+                Restore Connection
+              </button>
+            </motion.div>
+          )}
 
-        <JournalEntryList
-          entries={entries}
-          loading={entriesLoading}
-          onEntryClick={setSelectedEntry}
-        />
-
-        {/* New Entry Modal */}
-        <NewJournalEntry
-          isOpen={showNewEntry}
-          onClose={() => setShowNewEntry(false)}
-          onSave={handleNewEntry}
+          {/* Sacred Journal Entries */}
+          <motion.div
+            initial={{ y: 20, opacity: 0 }}
+            animate={{ y: 0, opacity: 1 }}
+            transition={{ delay: 0.4, duration: 0.5 }}
+          >
+            <JournalEntryList
+              entries={entries}
+              loading={loading}
+              onEntryClick={setSelectedEntry}
+            />
+          </motion.div>
+        </div>
+      </motion.div>
+      
+      {/* Sacred Journal Entry Modal */}
+      <SacredJournalEntry
+        isOpen={showNewEntry}
+        onClose={() => setShowNewEntry(false)}
+        onSave={handleNewEntry}
+      />
+      
+      {/* Entry Detail Modal */}
+      {selectedEntry && (
+        <JournalEntryModal
+          entry={selectedEntry}
+          onClose={() => setSelectedEntry(null)}
+          onUpdate={handleUpdateEntry}
+          onDelete={handleDeleteEntry}
         />
-
-        {/* Entry Detail Modal */}
-        {selectedEntry && (
-          <JournalEntryModal
-            entry={selectedEntry}
-            onClose={() => setSelectedEntry(null)}
-            onUpdate={handleUpdateEntry}
-            onDelete={handleDeleteEntry}
-          />
-        )}
-      </div>
+      )}
     </div>
   )
 }
diff --git a/src/app/login/page.js b/src/app/login/page.js
index 2550d9c..a014ad4 100644
--- a/src/app/login/page.js
+++ b/src/app/login/page.js
@@ -5,7 +5,7 @@ import { useState, useEffect } from 'react';
 import { useLogin } from '@/hooks/useLogin';
 import { useAuth } from '@/contexts/AuthContext';
 import Link from 'next/link';
-import { useRouter, useSearchParams } from 'next/navigation';
+import { useRouter } from 'next/navigation';
 import { LoadingSpinner } from '@/components/LoadingSpinner';
 import SacredButton from '@/components/ui/sacred-button';
 import SacredCard from '@/components/ui/sacred-card';
@@ -19,10 +19,6 @@ export default function LoginPage() {
   const { handleLogin, isLoading, error, validationErrors, clearErrors } = useLogin();
   const { user, loading: authLoading } = useAuth(); // Fixed: Added loading state
   const router = useRouter();
-  const searchParams = useSearchParams();
-  
-  // Get the return URL from query parameters
-  const returnUrl = searchParams.get('returnUrl') || '/dashboard';
 
   // ENHANCED REDIRECT LOGIC - Fixed to check loading state
   useEffect(() => {
@@ -36,7 +32,7 @@ export default function LoginPage() {
   const onSubmit = async (e) => {
     e.preventDefault();
     
-    const result = await handleLogin(email, password, returnUrl);
+    const result = await handleLogin(email, password);
     
     if (result.success) {
       setLoginSuccess(true);
diff --git a/src/app/test-journal-system/page.js b/src/app/test-journal-system/page.js
index 29e0874..b93e94b 100644
--- a/src/app/test-journal-system/page.js
+++ b/src/app/test-journal-system/page.js
@@ -263,7 +263,7 @@ export default function TestJournalSystem() {
           <h2 className="text-xl font-semibold text-gray-900 mb-4">Test Results</h2>
           
           {results.length === 0 ? (
-            <p className="text-gray-500 italic">No tests run yet. Click &quot;Run Full Test Suite&quot; to begin.</p>
+            <p className="text-gray-500 italic">No tests run yet. Click "Run Full Test Suite" to begin.</p>
           ) : (
             <div className="space-y-4">
               {results.map((result, index) => (
diff --git a/src/app/workshop/layout.js b/src/app/workshop/layout.js
deleted file mode 100644
index b786b88..0000000
--- a/src/app/workshop/layout.js
+++ /dev/null
@@ -1,28 +0,0 @@
-
-// Standalone layout for Sacred Journal Workshop - NO AUTH DEPENDENCIES
-import "../globals.css";
-
-export const metadata = {
-  title: "Sacred Journal Workshop",
-  description: "A sacred space for spiritual reflection and transformation.",
-};
-
-export default function WorkshopLayout({ children }) {
-  return (
-    <html lang="en">
-      <head>
-        {/* Sacred Journey Fonts - Playfair Display + Inter */}
-        <link rel="preconnect" href="https://fonts.googleapis.com" />
-        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="true" />
-        <link 
-          href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700;800;900&family=Inter:wght@300;400;500;600;700&display=swap" 
-          rel="stylesheet" 
-        />
-      </head>
-      <body className="font-body antialiased min-h-screen bg-gradient-to-br from-slate-50 to-blue-50">
-        {/* NO AUTH PROVIDER - NO LAYOUT COMPONENT - STANDALONE */}
-        {children}
-      </body>
-    </html>
-  );
-}
diff --git a/src/app/workshop/page.js b/src/app/workshop/page.js
deleted file mode 100644
index b3a39c9..0000000
--- a/src/app/workshop/page.js
+++ /dev/null
@@ -1,10 +0,0 @@
-
-export default function WorkshopPage() {
-  return (
-    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>
-      <h1>Sacred Journal Workshop</h1>
-      <p>‚úÖ SUCCESS: Standalone workshop is working!</p>
-      <p>No authentication required - direct access achieved!</p>
-    </div>
-  );
-}
diff --git a/src/components/Layout.tsx b/src/components/Layout.tsx
index 95a17f6..a12fbf1 100644
--- a/src/components/Layout.tsx
+++ b/src/components/Layout.tsx
@@ -3,8 +3,6 @@
 import Link from 'next/link';
 import { usePathname } from 'next/navigation';
 import { useEffect, useState, ReactNode } from 'react';
-import { useAuth } from '@/contexts/AuthContext';
-import { LoadingSpinner } from '@/components/LoadingSpinner';
 
 // Define interfaces
 interface LayoutProps {
@@ -21,8 +19,6 @@ interface Section {
 export default function Layout({ children }: LayoutProps): React.ReactElement {
   const pathname = usePathname();
   const [sections, setSections] = useState<Section[]>([]);
-  const { user, logout, loading } = useAuth();
-  const [isLoggingOut, setIsLoggingOut] = useState(false);
 
   // Check if current page should have full-screen layout (no sidebar)
   const isFullScreenPage = pathname === '/onboarding' || 
@@ -30,18 +26,6 @@ export default function Layout({ children }: LayoutProps): React.ReactElement {
                            pathname === '/signup' || 
                            pathname === '/forgot-password';
 
-  // Handle logout
-  const handleLogout = async () => {
-    setIsLoggingOut(true);
-    try {
-      await logout();
-    } catch (error) {
-      console.error('Logout error:', error);
-    } finally {
-      setIsLoggingOut(false);
-    }
-  };
-
   useEffect(() => {
     // Only fetch sections if not on a full-screen page
     if (!isFullScreenPage) {
@@ -135,49 +119,6 @@ export default function Layout({ children }: LayoutProps): React.ReactElement {
                 </li>
               </ul>
             </nav>
-
-            {/* User Profile Section */}
-            {user && (
-              <div className="mt-8 pt-6 border-t border-sacred-blue-300">
-                <div className="px-4 pb-4">
-                  <div className="flex items-center space-x-3 mb-4">
-                    <div className="h-10 w-10 bg-sacred-gold-200 rounded-full flex items-center justify-center">
-                      <svg className="h-6 w-6 text-sacred-blue-900" fill="none" stroke="currentColor" viewBox="0 0 24 24">
-                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
-                      </svg>
-                    </div>
-                    <div className="flex-1 min-w-0">
-                      <p className="text-sm font-medium text-sacred-blue-900 truncate">
-                        {user.email}
-                      </p>
-                      <p className="text-xs text-sacred-blue-700">
-                        Sacred Journey Member
-                      </p>
-                    </div>
-                  </div>
-                  
-                  <button
-                    onClick={handleLogout}
-                    disabled={isLoggingOut}
-                    className="w-full flex items-center justify-center px-4 py-2 text-sm font-medium text-sacred-blue-700 bg-white/50 border border-sacred-blue-300 rounded-lg hover:bg-red-50 hover:text-red-700 hover:border-red-300 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
-                  >
-                    {isLoggingOut ? (
-                      <>
-                        <LoadingSpinner size="sm" className="mr-2" />
-                        Signing Out...
-                      </>
-                    ) : (
-                      <>
-                        <svg className="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
-                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
-                        </svg>
-                        Sign Out
-                      </>
-                    )}
-                  </button>
-                </div>
-              </div>
-            )}
           </div>
         </aside>
 
diff --git a/src/components/journal/JournalHeader.jsx b/src/components/journal/JournalHeader.jsx
index fa241ce..79f5f75 100644
--- a/src/components/journal/JournalHeader.jsx
+++ b/src/components/journal/JournalHeader.jsx
@@ -2,7 +2,10 @@
 'use client'
 
 import { useState } from 'react'
-import { PlusIcon, BookOpenIcon, MagnifyingGlassIcon, AdjustmentsHorizontalIcon } from '@heroicons/react/24/outline'
+import { motion } from 'framer-motion'
+import { PlusIcon, BookOpenIcon, MagnifyingGlassIcon, AdjustmentsHorizontalIcon, SparklesIcon } from '@heroicons/react/24/outline'
+import SacredButton from '@/components/ui/sacred-button'
+import SacredCard from '@/components/ui/sacred-card'
 
 export default function JournalHeader({ entries, stats, filters, onFilterChange, onNewEntry }) {
   const [showFilters, setShowFilters] = useState(false)
@@ -32,27 +35,48 @@ export default function JournalHeader({ entries, stats, filters, onFilterChange,
 
   return (
     <div className="mb-8">
-      <div className="flex flex-col md:flex-row md:justify-between md:items-start mb-6 gap-4">
-        <div>
-          <h1 className="text-3xl font-bold text-gray-900 mb-2">
-            Sacred Journal
-          </h1>
-          <p className="text-gray-600">
-            Your personal space for spiritual reflection and growth
-          </p>
+      <SacredCard variant="heavy" className="p-8 mb-6">
+        <div className="flex flex-col md:flex-row md:justify-between md:items-start gap-6">
+          <motion.div
+            initial={{ x: -20, opacity: 0 }}
+            animate={{ x: 0, opacity: 1 }}
+            transition={{ duration: 0.5 }}
+          >
+            <div className="flex items-center space-x-3 mb-3">
+              <SparklesIcon className="w-8 h-8 text-blue-600" />
+              <h1 className="text-4xl font-bold text-sacred-dark font-serif">
+                Sacred Journal
+              </h1>
+            </div>
+            <p className="text-sacred-medium text-lg">
+              Your personal sanctuary for spiritual reflection and conscious growth
+            </p>
+            <p className="text-sacred-medium text-sm mt-2 opacity-80">
+              A workshop for the soul ‚Ä¢ Mindful reflection ‚Ä¢ Sacred space
+            </p>
+          </motion.div>
+          
+          <motion.div
+            initial={{ x: 20, opacity: 0 }}
+            animate={{ x: 0, opacity: 1 }}
+            transition={{ duration: 0.5, delay: 0.2 }}
+            className="flex-shrink-0"
+          >
+            <SacredButton
+              onClick={onNewEntry}
+              variant="primary"
+              size="lg"
+              className="shadow-xl hover:shadow-2xl"
+            >
+              <PlusIcon className="w-5 h-5 mr-2" />
+              Begin Sacred Reflection
+            </SacredButton>
+          </motion.div>
         </div>
-        
-        <button
-          onClick={onNewEntry}
-          className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium flex items-center space-x-2 transition-colors self-start"
-        >
-          <PlusIcon className="w-5 h-5" />
-          <span>New Reflection</span>
-        </button>
-      </div>
+      </SacredCard>
 
       {/* Search and Filters */}
-      <div className="bg-white rounded-lg shadow-sm border border-gray-100 p-4 mb-6">
+      <SacredCard variant="glass" className="p-6 mb-6">
         <div className="flex flex-col md:flex-row gap-4">
           {/* Search */}
           <div className="flex-1 relative">
@@ -146,11 +170,16 @@ export default function JournalHeader({ entries, stats, filters, onFilterChange,
             )}
           </div>
         )}
-      </div>
+      </SacredCard>
       
       {/* Statistics */}
       {totalEntries > 0 && (
-        <div className="bg-white rounded-lg shadow-sm border border-gray-100 p-6">
+        <motion.div
+          initial={{ y: 20, opacity: 0 }}
+          animate={{ y: 0, opacity: 1 }}
+          transition={{ duration: 0.5, delay: 0.4 }}
+        >
+          <SacredCard variant="glass" className="p-6">
           <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
             <BookOpenIcon className="w-5 h-5 mr-2" />
             Your Spiritual Journey
@@ -208,7 +237,8 @@ export default function JournalHeader({ entries, stats, filters, onFilterChange,
               </div>
             </div>
           )}
-        </div>
+          </SacredCard>
+        </motion.div>
       )}
     </div>
   )
diff --git a/src/components/journal/MindsetDiscernmentCards.jsx b/src/components/journal/MindsetDiscernmentCards.jsx
new file mode 100644
index 0000000..ce46e9f
--- /dev/null
+++ b/src/components/journal/MindsetDiscernmentCards.jsx
@@ -0,0 +1,185 @@
+
+'use client'
+
+import { motion, AnimatePresence } from 'framer-motion'
+import { useState } from 'react'
+import SacredCard from '@/components/ui/sacred-card'
+
+const mindsetData = {
+  'Natural': {
+    title: 'Natural Mind',
+    description: 'Grounded in earthly thoughts and daily experiences. Present moment awareness without spiritual overlay.',
+    guidance: 'Focus on practical insights, life lessons, and authentic reactions to your experiences.',
+    icon: 'üå±',
+    color: 'from-emerald-500 to-green-600',
+    bgGradient: 'from-emerald-50 to-green-50',
+    borderColor: 'border-emerald-200',
+    prompts: [
+      'What did I learn about myself today?',
+      'How did I respond to challenges?',
+      'What patterns do I notice in my behavior?'
+    ]
+  },
+  'Transition': {
+    title: 'In Transition',
+    description: 'Between states of being. Questioning, exploring, and discovering new perspectives on life.',
+    guidance: 'Embrace uncertainty and explore the questions arising in your consciousness.',
+    icon: 'üåä',
+    color: 'from-blue-500 to-cyan-600',
+    bgGradient: 'from-blue-50 to-cyan-50',
+    borderColor: 'border-blue-200',
+    prompts: [
+      'What questions am I holding right now?',
+      'How are my perspectives shifting?',
+      'What feels like it wants to emerge?'
+    ]
+  },
+  'Spiritual': {
+    title: 'Spiritual Mind',
+    description: 'Connected to deeper meaning and purpose. Aware of the sacred dimension of experience.',
+    guidance: 'Reflect on connection, purpose, and the deeper currents moving through your life.',
+    icon: '‚ú®',
+    color: 'from-purple-500 to-indigo-600',
+    bgGradient: 'from-purple-50 to-indigo-50',
+    borderColor: 'border-purple-200',
+    prompts: [
+      'How did I sense the sacred today?',
+      'What feels divinely guided in my life?',
+      'How am I being called to serve or grow?'
+    ]
+  }
+}
+
+export default function MindsetDiscernmentCards({ selectedMindset, onMindsetSelect, onPromptsUpdate }) {
+  const [expandedCard, setExpandedCard] = useState(null)
+
+  const handleCardClick = (mindset) => {
+    if (selectedMindset === mindset) {
+      // If already selected, expand/collapse
+      setExpandedCard(expandedCard === mindset ? null : mindset)
+    } else {
+      // Select new mindset
+      onMindsetSelect(mindset)
+      setExpandedCard(mindset)
+      
+      // Update prompts in parent
+      if (onPromptsUpdate) {
+        onPromptsUpdate(mindsetData[mindset].prompts)
+      }
+    }
+  }
+
+  return (
+    <div className="space-y-4">
+      <div className="text-center mb-6">
+        <h3 className="text-xl font-semibold text-sacred-dark mb-2">
+          Mindset Discernment
+        </h3>
+        <p className="text-sm text-sacred-medium">
+          Which consciousness are you writing from today?
+        </p>
+      </div>
+
+      {Object.entries(mindsetData).map(([key, data]) => {
+        const isSelected = selectedMindset === key
+        const isExpanded = expandedCard === key
+
+        return (
+          <motion.div
+            key={key}
+            layout
+            className="relative"
+          >
+            <SacredCard
+              variant="glass"
+              hover={true}
+              onClick={() => handleCardClick(key)}
+              className={`p-4 transition-all duration-300 ${
+                isSelected 
+                  ? `ring-2 ring-blue-400 bg-gradient-to-br ${data.bgGradient} border ${data.borderColor}` 
+                  : 'hover:shadow-lg'
+              }`}
+            >
+              <div className="flex items-center space-x-3">
+                <div className={`w-12 h-12 rounded-full bg-gradient-to-br ${data.color} flex items-center justify-center text-white text-xl shadow-lg`}>
+                  {data.icon}
+                </div>
+                <div className="flex-1 min-w-0">
+                  <h4 className="font-semibold text-sacred-dark text-sm">
+                    {data.title}
+                  </h4>
+                  <p className="text-xs text-sacred-medium mt-1 line-clamp-2">
+                    {data.description}
+                  </p>
+                </div>
+                {isSelected && (
+                  <motion.div
+                    initial={{ scale: 0 }}
+                    animate={{ scale: 1 }}
+                    className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center"
+                  >
+                    <svg className="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
+                      <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
+                    </svg>
+                  </motion.div>
+                )}
+              </div>
+
+              <AnimatePresence>
+                {isExpanded && (
+                  <motion.div
+                    initial={{ height: 0, opacity: 0 }}
+                    animate={{ height: 'auto', opacity: 1 }}
+                    exit={{ height: 0, opacity: 0 }}
+                    transition={{ duration: 0.3 }}
+                    className="mt-4 pt-4 border-t border-gray-200 overflow-hidden"
+                  >
+                    <div className="space-y-3">
+                      <div>
+                        <h5 className="text-xs font-semibold text-sacred-dark mb-1">
+                          Guidance
+                        </h5>
+                        <p className="text-xs text-sacred-medium">
+                          {data.guidance}
+                        </p>
+                      </div>
+                      
+                      <div>
+                        <h5 className="text-xs font-semibold text-sacred-dark mb-2">
+                          Reflection Prompts
+                        </h5>
+                        <div className="space-y-1">
+                          {data.prompts.map((prompt, index) => (
+                            <div key={index} className="text-xs text-sacred-medium flex items-start space-x-2">
+                              <span className="text-blue-400 mt-0.5">‚Ä¢</span>
+                              <span>{prompt}</span>
+                            </div>
+                          ))}
+                        </div>
+                      </div>
+                    </div>
+                  </motion.div>
+                )}
+              </AnimatePresence>
+            </SacredCard>
+          </motion.div>
+        )
+      })}
+
+      {selectedMindset && (
+        <motion.div
+          initial={{ y: 20, opacity: 0 }}
+          animate={{ y: 0, opacity: 1 }}
+          className="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200"
+        >
+          <div className="flex items-center space-x-2">
+            <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse"></div>
+            <p className="text-xs text-blue-700 font-medium">
+              Writing from {mindsetData[selectedMindset].title} consciousness
+            </p>
+          </div>
+        </motion.div>
+      )}
+    </div>
+  )
+}
diff --git a/src/components/journal/NewJournalEntry.jsx b/src/components/journal/NewJournalEntry.jsx
index 83a767a..a624bc8 100644
--- a/src/components/journal/NewJournalEntry.jsx
+++ b/src/components/journal/NewJournalEntry.jsx
@@ -1,10 +1,8 @@
 
-
 'use client'
 
-import { useState, useEffect, useCallback } from 'react'
-import { XMarkIcon, CloudIcon, CheckCircleIcon } from '@heroicons/react/24/outline'
-import journalStorage from '@/lib/journalStorage'
+import { useState } from 'react'
+import { XMarkIcon } from '@heroicons/react/24/outline'
 
 export default function NewJournalEntry({ isOpen, onClose, onSave }) {
   const [formData, setFormData] = useState({
@@ -17,78 +15,12 @@ export default function NewJournalEntry({ isOpen, onClose, onSave }) {
   const [tagInput, setTagInput] = useState('')
   const [loading, setLoading] = useState(false)
   const [error, setError] = useState('')
-  const [autoSaveStatus, setAutoSaveStatus] = useState('') // 'saving', 'saved', 'error'
-  const [draftRestored, setDraftRestored] = useState(false)
-  const [saveSuccess, setSaveSuccess] = useState(false)
 
   const handleInputChange = (e) => {
     const { name, value } = e.target
     setFormData(prev => ({ ...prev, [name]: value }))
   }
 
-  // Auto-save function with debouncing
-  const autoSave = useCallback(async () => {
-    if (formData.title.trim() || formData.content.trim()) {
-      setAutoSaveStatus('saving')
-      try {
-        const success = journalStorage.saveDraft(formData)
-        setAutoSaveStatus(success ? 'saved' : 'error')
-        
-        // Clear status after 2 seconds
-        setTimeout(() => setAutoSaveStatus(''), 2000)
-      } catch (error) {
-        setAutoSaveStatus('error')
-        setTimeout(() => setAutoSaveStatus(''), 2000)
-      }
-    }
-  }, [formData])
-
-  // Load draft when modal opens
-  useEffect(() => {
-    if (isOpen && !draftRestored) {
-      const draft = journalStorage.loadDraft()
-      if (draft) {
-        setFormData({
-          title: draft.title || '',
-          content: draft.content || '',
-          mindset: draft.mindset || '',
-          reflection_type: draft.reflection_type || 'general',
-          tags: draft.tags || []
-        })
-        setDraftRestored(true)
-      }
-    }
-  }, [isOpen, draftRestored])
-
-  // Auto-save with debouncing
-  useEffect(() => {
-    if (!isOpen) return
-
-    const timeoutId = setTimeout(() => {
-      autoSave()
-    }, 1000) // Auto-save after 1 second of inactivity
-
-    return () => clearTimeout(timeoutId)
-  }, [formData, isOpen, autoSave])
-
-  // Reset form when modal closes
-  useEffect(() => {
-    if (!isOpen) {
-      setFormData({
-        title: '',
-        content: '',
-        mindset: '',
-        reflection_type: 'general',
-        tags: []
-      })
-      setTagInput('')
-      setError('')
-      setAutoSaveStatus('')
-      setDraftRestored(false)
-      setSaveSuccess(false)
-    }
-  }, [isOpen])
-
   const handleAddTag = (e) => {
     e.preventDefault()
     const tag = tagInput.trim()
@@ -117,7 +49,7 @@ export default function NewJournalEntry({ isOpen, onClose, onSave }) {
 
   const handleSubmit = async (e) => {
     e.preventDefault()
-
+    
     if (!formData.title.trim() && !formData.content.trim()) {
       setError('Please provide either a title or content for your reflection.')
       return
@@ -128,10 +60,6 @@ export default function NewJournalEntry({ isOpen, onClose, onSave }) {
 
     try {
       await onSave(formData)
-      
-      // Show success message
-      setSaveSuccess(true)
-      
       // Reset form
       setFormData({
         title: '',
@@ -141,16 +69,6 @@ export default function NewJournalEntry({ isOpen, onClose, onSave }) {
         tags: []
       })
       setTagInput('')
-      
-      // Clear draft since we successfully saved
-      journalStorage.clearDraft()
-      
-      // Close modal after a short delay
-      setTimeout(() => {
-        setSaveSuccess(false)
-        onClose()
-      }, 1500)
-      
     } catch (error) {
       setError(error.message)
     } finally {
@@ -171,42 +89,7 @@ export default function NewJournalEntry({ isOpen, onClose, onSave }) {
     <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
       <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
         <div className="flex justify-between items-center p-6 border-b border-gray-200">
-          <div className="flex-1">
-            <h2 className="text-xl font-semibold text-gray-900">New Sacred Reflection</h2>
-            
-            {/* Auto-save status indicator */}
-            {autoSaveStatus && (
-              <div className="flex items-center mt-1 text-sm">
-                {autoSaveStatus === 'saving' && (
-                  <div className="flex items-center text-blue-600">
-                    <CloudIcon className="w-4 h-4 mr-1 animate-pulse" />
-                    <span>Saving draft...</span>
-                  </div>
-                )}
-                {autoSaveStatus === 'saved' && (
-                  <div className="flex items-center text-green-600">
-                    <CloudIcon className="w-4 h-4 mr-1" />
-                    <span>Draft saved</span>
-                  </div>
-                )}
-                {autoSaveStatus === 'error' && (
-                  <div className="flex items-center text-red-600">
-                    <CloudIcon className="w-4 h-4 mr-1" />
-                    <span>Error saving draft</span>
-                  </div>
-                )}
-              </div>
-            )}
-
-            {/* Success message */}
-            {saveSuccess && (
-              <div className="flex items-center mt-1 text-sm text-green-600">
-                <CheckCircleIcon className="w-4 h-4 mr-1" />
-                <span>Reflection saved successfully!</span>
-              </div>
-            )}
-          </div>
-          
+          <h2 className="text-xl font-semibold text-gray-900">New Sacred Reflection</h2>
           <button
             onClick={handleClose}
             disabled={loading}
@@ -320,10 +203,11 @@ export default function NewJournalEntry({ isOpen, onClose, onSave }) {
                 Add
               </button>
             </div>
+            
             {formData.tags.length > 0 && (
               <div className="flex flex-wrap gap-2">
                 {formData.tags.map((tag, index) => (
-                  <span
+                  <span 
                     key={index}
                     className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm flex items-center space-x-1"
                   >
@@ -354,10 +238,9 @@ export default function NewJournalEntry({ isOpen, onClose, onSave }) {
             <button
               type="submit"
               disabled={loading || (!formData.title.trim() && !formData.content.trim())}
-              className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
+              className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
             >
-              {loading && <CloudIcon className="w-4 h-4 animate-spin" />}
-              <span>{loading ? 'Saving...' : 'Save Reflection'}</span>
+              {loading ? 'Saving...' : 'Save Reflection'}
             </button>
           </div>
         </form>
diff --git a/src/components/journal/SacredJournalEntry.jsx b/src/components/journal/SacredJournalEntry.jsx
new file mode 100644
index 0000000..6c165a3
--- /dev/null
+++ b/src/components/journal/SacredJournalEntry.jsx
@@ -0,0 +1,371 @@
+
+'use client'
+
+import { useState, useEffect } from 'react'
+import { motion, AnimatePresence } from 'framer-motion'
+import { XMarkIcon, CloudIcon, CheckCircleIcon, SparklesIcon } from '@heroicons/react/24/outline'
+
+import SacredCard from '@/components/ui/sacred-card'
+import SacredButton from '@/components/ui/sacred-button'
+import MindsetDiscernmentCards from './MindsetDiscernmentCards'
+
+export default function SacredJournalEntry({ isOpen, onClose, onSave }) {
+  const [formData, setFormData] = useState({
+    title: '',
+    content: '',
+    mindset: '',
+    reflection_type: 'general',
+    tags: []
+  })
+  const [tagInput, setTagInput] = useState('')
+  const [loading, setLoading] = useState(false)
+  const [error, setError] = useState('')
+  const [saveSuccess, setSaveSuccess] = useState(false)
+  const [currentPrompts, setCurrentPrompts] = useState([])
+  const [inspirationVisible, setInspirationVisible] = useState(true)
+
+  const handleInputChange = (e) => {
+    const { name, value } = e.target
+    setFormData(prev => ({ ...prev, [name]: value }))
+  }
+
+  // Reset form when modal closes
+  useEffect(() => {
+    if (!isOpen) {
+      setFormData({
+        title: '',
+        content: '',
+        mindset: '',
+        reflection_type: 'general',
+        tags: []
+      })
+      setTagInput('')
+      setError('')
+      setSaveSuccess(false)
+      setCurrentPrompts([])
+      setInspirationVisible(true)
+    }
+  }, [isOpen])
+
+  const handleMindsetSelect = (mindset) => {
+    setFormData(prev => ({ ...prev, mindset }))
+  }
+
+  const handlePromptsUpdate = (prompts) => {
+    setCurrentPrompts(prompts)
+  }
+
+  const handleAddTag = (e) => {
+    e.preventDefault()
+    const tag = tagInput.trim()
+    if (tag && !formData.tags.includes(tag)) {
+      setFormData(prev => ({
+        ...prev,
+        tags: [...prev.tags, tag]
+      }))
+      setTagInput('')
+    }
+  }
+
+  const handleRemoveTag = (tagToRemove) => {
+    setFormData(prev => ({
+      ...prev,
+      tags: prev.tags.filter(tag => tag !== tagToRemove)
+    }))
+  }
+
+  const handleKeyPress = (e) => {
+    if (e.key === 'Enter' && e.target.name === 'tagInput') {
+      e.preventDefault()
+      handleAddTag(e)
+    }
+  }
+
+  const handleSubmit = async (e) => {
+    e.preventDefault()
+
+    if (!formData.title.trim() && !formData.content.trim()) {
+      setError('Please provide either a title or content for your reflection.')
+      return
+    }
+
+    if (!formData.mindset) {
+      setError('Please select a mindset to guide your reflection.')
+      return
+    }
+
+    setLoading(true)
+    setError('')
+
+    try {
+      await onSave(formData)
+      setSaveSuccess(true)
+      
+      setFormData({
+        title: '',
+        content: '',
+        mindset: '',
+        reflection_type: 'general',
+        tags: []
+      })
+      setTagInput('')
+      
+      setTimeout(() => {
+        setSaveSuccess(false)
+        onClose()
+      }, 1500)
+      
+    } catch (error) {
+      setError(error.message)
+    } finally {
+      setLoading(false)
+    }
+  }
+
+  const handleClose = () => {
+    if (!loading) {
+      onClose()
+      setError('')
+    }
+  }
+
+  if (!isOpen) return null
+
+  return (
+    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center p-4 z-50">
+      <motion.div
+        initial={{ scale: 0.9, opacity: 0, y: 20 }}
+        animate={{ scale: 1, opacity: 1, y: 0 }}
+        exit={{ scale: 0.9, opacity: 0, y: 20 }}
+        transition={{ duration: 0.3 }}
+        className="w-full max-w-7xl max-h-[95vh] overflow-hidden"
+      >
+        <SacredCard variant="heavy" className="overflow-hidden">
+          {/* Sacred Header */}
+          <div className="p-6 border-b border-gray-200 bg-gradient-to-r from-blue-50 to-indigo-50">
+            <div className="flex justify-between items-center">
+              <div className="flex-1">
+                <div className="flex items-center space-x-3">
+                  <SparklesIcon className="w-8 h-8 text-blue-600" />
+                  <div>
+                    <h2 className="text-2xl font-semibold text-sacred-dark font-serif">
+                      Sacred Reflection
+                    </h2>
+                    <p className="text-sm text-sacred-medium">
+                      A workshop for the soul
+                    </p>
+                  </div>
+                </div>
+
+
+                {/* Success message */}
+                {saveSuccess && (
+                  <motion.div
+                    initial={{ y: 10, opacity: 0 }}
+                    animate={{ y: 0, opacity: 1 }}
+                    className="flex items-center mt-2 text-sm text-green-600"
+                  >
+                    <CheckCircleIcon className="w-4 h-4 mr-1" />
+                    <span>Reflection saved successfully!</span>
+                  </motion.div>
+                )}
+              </div>
+              
+              <button
+                onClick={handleClose}
+                disabled={loading}
+                className="text-gray-400 hover:text-gray-600 disabled:opacity-50 p-2 rounded-lg hover:bg-white/50 transition-colors"
+              >
+                <XMarkIcon className="w-6 h-6" />
+              </button>
+            </div>
+          </div>
+
+          {/* Two-Column Sacred Layout */}
+          <div className="flex h-[calc(95vh-200px)]">
+            {/* Left Column - Mindset Discernment */}
+            <div className="w-1/3 p-6 border-r border-gray-200 bg-gradient-to-b from-blue-25 to-indigo-25 overflow-y-auto">
+              <MindsetDiscernmentCards
+                selectedMindset={formData.mindset}
+                onMindsetSelect={handleMindsetSelect}
+                onPromptsUpdate={handlePromptsUpdate}
+              />
+
+              {/* Inspiration Section */}
+              <AnimatePresence>
+                {inspirationVisible && currentPrompts.length > 0 && (
+                  <motion.div
+                    initial={{ y: 20, opacity: 0 }}
+                    animate={{ y: 0, opacity: 1 }}
+                    exit={{ y: -20, opacity: 0 }}
+                    className="mt-6"
+                  >
+                    <SacredCard variant="glass" className="p-4">
+                      <h4 className="text-sm font-semibold text-sacred-dark mb-3 flex items-center">
+                        <SparklesIcon className="w-4 h-4 mr-2 text-blue-500" />
+                        Reflection Starters
+                      </h4>
+                      <div className="space-y-2">
+                        {currentPrompts.map((prompt, index) => (
+                          <motion.button
+                            key={index}
+                            initial={{ x: -10, opacity: 0 }}
+                            animate={{ x: 0, opacity: 1 }}
+                            transition={{ delay: index * 0.1 }}
+                            onClick={() => {
+                              setFormData(prev => ({
+                                ...prev,
+                                content: prev.content + (prev.content ? '\n\n' : '') + prompt + '\n'
+                              }))
+                            }}
+                            className="w-full text-left text-xs text-sacred-medium hover:text-blue-600 p-2 rounded-lg hover:bg-blue-50 transition-colors border border-transparent hover:border-blue-200"
+                          >
+                            {prompt}
+                          </motion.button>
+                        ))}
+                      </div>
+                    </SacredCard>
+                  </motion.div>
+                )}
+              </AnimatePresence>
+            </div>
+
+            {/* Right Column - Journal Entry Form */}
+            <div className="flex-1 p-6 overflow-y-auto">
+              <form onSubmit={handleSubmit} className="h-full flex flex-col">
+                {error && (
+                  <motion.div
+                    initial={{ y: -10, opacity: 0 }}
+                    animate={{ y: 0, opacity: 1 }}
+                    className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6"
+                  >
+                    <p className="text-red-800">{error}</p>
+                  </motion.div>
+                )}
+
+                {/* Title */}
+                <div className="mb-6">
+                  <label htmlFor="title" className="block text-sm font-medium text-sacred-dark mb-2">
+                    Title
+                  </label>
+                  <input
+                    type="text"
+                    id="title"
+                    name="title"
+                    value={formData.title}
+                    onChange={handleInputChange}
+                    placeholder="Give your reflection a meaningful title..."
+                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white/80 backdrop-blur-sm"
+                  />
+                </div>
+
+                {/* Content - Takes remaining space */}
+                <div className="flex-1 mb-6">
+                  <label htmlFor="content" className="block text-sm font-medium text-sacred-dark mb-2">
+                    Your Sacred Reflection
+                  </label>
+                  <textarea
+                    id="content"
+                    name="content"
+                    value={formData.content}
+                    onChange={handleInputChange}
+                    placeholder="Share your thoughts, insights, and spiritual reflections..."
+                    className="w-full h-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none bg-white/80 backdrop-blur-sm min-h-[300px]"
+                  />
+                </div>
+
+                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
+                  {/* Reflection Type */}
+                  <div>
+                    <label htmlFor="reflection_type" className="block text-sm font-medium text-sacred-dark mb-2">
+                      Reflection Type
+                    </label>
+                    <select
+                      id="reflection_type"
+                      name="reflection_type"
+                      value={formData.reflection_type}
+                      onChange={handleInputChange}
+                      className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white/80 backdrop-blur-sm"
+                    >
+                      <option value="general">General Reflection</option>
+                      <option value="assessment">Self Assessment</option>
+                      <option value="daily">Daily Practice</option>
+                      <option value="intention">Intention Setting</option>
+                      <option value="completion">Completion Ceremony</option>
+                    </select>
+                  </div>
+
+                  {/* Tags */}
+                  <div>
+                    <label htmlFor="tagInput" className="block text-sm font-medium text-sacred-dark mb-2">
+                      Tags (Optional)
+                    </label>
+                    <div className="flex space-x-2">
+                      <input
+                        type="text"
+                        id="tagInput"
+                        name="tagInput"
+                        value={tagInput}
+                        onChange={(e) => setTagInput(e.target.value)}
+                        onKeyPress={handleKeyPress}
+                        placeholder="Add meaningful tags..."
+                        className="flex-1 px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white/80 backdrop-blur-sm"
+                      />
+                      <SacredButton
+                        type="button"
+                        onClick={handleAddTag}
+                        variant="ghost"
+                        size="sm"
+                      >
+                        Add
+                      </SacredButton>
+                    </div>
+                    {formData.tags.length > 0 && (
+                      <div className="flex flex-wrap gap-2 mt-3">
+                        {formData.tags.map((tag, index) => (
+                          <span
+                            key={index}
+                            className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm flex items-center space-x-1"
+                          >
+                            <span>{tag}</span>
+                            <button
+                              type="button"
+                              onClick={() => handleRemoveTag(tag)}
+                              className="text-blue-600 hover:text-blue-800"
+                            >
+                              <XMarkIcon className="w-4 h-4" />
+                            </button>
+                          </span>
+                        ))}
+                      </div>
+                    )}
+                  </div>
+                </div>
+
+                {/* Actions */}
+                <div className="flex justify-end space-x-3 pt-6 border-t border-gray-200">
+                  <SacredButton
+                    type="button"
+                    onClick={handleClose}
+                    disabled={loading}
+                    variant="ghost"
+                  >
+                    Cancel
+                  </SacredButton>
+                  <SacredButton
+                    type="submit"
+                    disabled={loading || (!formData.title.trim() && !formData.content.trim()) || !formData.mindset}
+                    loading={loading}
+                    variant="primary"
+                  >
+                    {loading ? 'Saving...' : 'Save Sacred Reflection'}
+                  </SacredButton>
+                </div>
+              </form>
+            </div>
+          </div>
+        </SacredCard>
+      </motion.div>
+    </div>
+  )
+}
diff --git a/src/contexts/AuthContext.tsx b/src/contexts/AuthContext.tsx
index 41aeb59..aec2b77 100644
--- a/src/contexts/AuthContext.tsx
+++ b/src/contexts/AuthContext.tsx
@@ -23,7 +23,7 @@ interface AuthContextValue {
   user: User | null;
   loading: boolean;
   signUp: (email: string, password: string) => Promise<AuthResult>;
-  login: (email: string, password: string, redirectPath?: string) => Promise<AuthResult>;
+  login: (email: string, password: string) => Promise<AuthResult>;
   logout: () => Promise<AuthError>;
 }
 
@@ -103,23 +103,14 @@ export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
     }
   };
 
-  // Login function with optional redirect
-  const login = async (email: string, password: string, redirectPath?: string): Promise<AuthResult> => {
+  // Login function
+  const login = async (email: string, password: string): Promise<AuthResult> => {
     setLoading(true);
     try {
       const { data, error } = await supabase.auth.signInWithPassword({ 
         email, 
         password 
       });
-      
-      if (!error && data?.user) {
-        // Handle redirect after successful login
-        const targetPath = redirectPath || '/dashboard';
-        setTimeout(() => {
-          router.push(targetPath);
-        }, 500); // Small delay to show success state
-      }
-      
       setLoading(false);
       return { 
         user: data?.user as User ?? null, 
diff --git a/src/hooks/useLogin.ts b/src/hooks/useLogin.ts
index 6c9def6..d06dbc3 100644
--- a/src/hooks/useLogin.ts
+++ b/src/hooks/useLogin.ts
@@ -95,7 +95,7 @@ export const useLogin = (): UseLoginReturn => {
       if (loginError) {
         const friendlyError = getErrorMessage(loginError);
         setError(friendlyError);
-        return { success: false, error: friendlyError ?? undefined };
+        return { success: false, error: friendlyError };
       }
       
       if (user && session) {
diff --git a/src/lib/journalStorage.js b/src/lib/journalStorage.js
deleted file mode 100644
index b6b529e..0000000
--- a/src/lib/journalStorage.js
+++ /dev/null
@@ -1,472 +0,0 @@
-
-/**
- * Sacred Journal localStorage Management System
- * 
- * This module provides complete CRUD operations for journal entries
- * using localStorage for client-side persistence without authentication.
- */
-
-// Storage keys
-const STORAGE_KEYS = {
-  ENTRIES: 'sacred_journal_entries',
-  SETTINGS: 'sacred_journal_settings',
-  STATS: 'sacred_journal_stats'
-}
-
-// Generate unique ID for entries
-const generateId = () => {
-  return Date.now().toString(36) + Math.random().toString(36).substr(2, 9)
-}
-
-// Validate entry data structure
-const validateEntry = (entry) => {
-  if (!entry || typeof entry !== 'object') {
-    throw new Error('Entry must be a valid object')
-  }
-  
-  if (!entry.title?.trim() && !entry.content?.trim()) {
-    throw new Error('Entry must have either a title or content')
-  }
-  
-  return true
-}
-
-// Safe JSON operations with error handling
-const safeJSONParse = (data, fallback = []) => {
-  try {
-    return JSON.parse(data) || fallback
-  } catch (error) {
-    console.warn('Failed to parse JSON data:', error)
-    return fallback
-  }
-}
-
-const safeJSONStringify = (data) => {
-  try {
-    return JSON.stringify(data)
-  } catch (error) {
-    console.error('Failed to stringify data:', error)
-    throw new Error('Failed to save data')
-  }
-}
-
-// Check localStorage availability and quota
-const checkStorageAvailability = () => {
-  try {
-    const testKey = '__sacred_journal_test__'
-    localStorage.setItem(testKey, 'test')
-    localStorage.removeItem(testKey)
-    return true
-  } catch (error) {
-    console.error('localStorage not available:', error)
-    return false
-  }
-}
-
-/**
- * Core Journal Storage Operations
- */
-export const journalStorage = {
-  
-  /**
-   * Create a new journal entry
-   */
-  createEntry: (entryData) => {
-    if (!checkStorageAvailability()) {
-      throw new Error('Storage not available. Please check your browser settings.')
-    }
-    
-    validateEntry(entryData)
-    
-    const newEntry = {
-      id: generateId(),
-      title: entryData.title?.trim() || '',
-      content: entryData.content?.trim() || '',
-      mindset: entryData.mindset || '',
-      reflection_type: entryData.reflection_type || 'general',
-      tags: Array.isArray(entryData.tags) ? entryData.tags : [],
-      created_at: new Date().toISOString(),
-      updated_at: new Date().toISOString(),
-      word_count: (entryData.content?.trim() || '').split(/\s+/).filter(Boolean).length
-    }
-    
-    try {
-      const existingEntries = safeJSONParse(localStorage.getItem(STORAGE_KEYS.ENTRIES), [])
-      const updatedEntries = [newEntry, ...existingEntries]
-      
-      localStorage.setItem(STORAGE_KEYS.ENTRIES, safeJSONStringify(updatedEntries))
-      
-      // Update stats
-      journalStorage.updateStats()
-      
-      return newEntry
-    } catch (error) {
-      if (error.name === 'QuotaExceededError') {
-        throw new Error('Storage quota exceeded. Please delete some entries or export your data.')
-      }
-      throw new Error('Failed to save entry: ' + error.message)
-    }
-  },
-  
-  /**
-   * Get all journal entries with optional filtering
-   */
-  getEntries: (filters = {}) => {
-    if (!checkStorageAvailability()) {
-      return []
-    }
-    
-    try {
-      const entries = safeJSONParse(localStorage.getItem(STORAGE_KEYS.ENTRIES), [])
-      
-      let filteredEntries = [...entries]
-      
-      // Apply filters
-      if (filters.mindset) {
-        filteredEntries = filteredEntries.filter(entry => 
-          entry.mindset === filters.mindset
-        )
-      }
-      
-      if (filters.reflection_type) {
-        filteredEntries = filteredEntries.filter(entry => 
-          entry.reflection_type === filters.reflection_type
-        )
-      }
-      
-      if (filters.search) {
-        const searchTerm = filters.search.toLowerCase()
-        filteredEntries = filteredEntries.filter(entry => 
-          entry.title?.toLowerCase().includes(searchTerm) ||
-          entry.content?.toLowerCase().includes(searchTerm) ||
-          entry.tags?.some(tag => tag.toLowerCase().includes(searchTerm))
-        )
-      }
-      
-      // Sort by created_at (newest first)
-      filteredEntries.sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
-      
-      return filteredEntries
-    } catch (error) {
-      console.error('Failed to retrieve entries:', error)
-      return []
-    }
-  },
-  
-  /**
-   * Get a single entry by ID
-   */
-  getEntry: (id) => {
-    if (!checkStorageAvailability()) {
-      return null
-    }
-    
-    try {
-      const entries = safeJSONParse(localStorage.getItem(STORAGE_KEYS.ENTRIES), [])
-      return entries.find(entry => entry.id === id) || null
-    } catch (error) {
-      console.error('Failed to retrieve entry:', error)
-      return null
-    }
-  },
-  
-  /**
-   * Update an existing journal entry
-   */
-  updateEntry: (id, updates) => {
-    if (!checkStorageAvailability()) {
-      throw new Error('Storage not available')
-    }
-    
-    try {
-      const entries = safeJSONParse(localStorage.getItem(STORAGE_KEYS.ENTRIES), [])
-      const entryIndex = entries.findIndex(entry => entry.id === id)
-      
-      if (entryIndex === -1) {
-        throw new Error('Entry not found')
-      }
-      
-      // Validate the updates
-      const updatedEntry = { ...entries[entryIndex], ...updates }
-      validateEntry(updatedEntry)
-      
-      // Update entry with new data
-      entries[entryIndex] = {
-        ...updatedEntry,
-        updated_at: new Date().toISOString(),
-        word_count: (updatedEntry.content?.trim() || '').split(/\s+/).filter(Boolean).length
-      }
-      
-      localStorage.setItem(STORAGE_KEYS.ENTRIES, safeJSONStringify(entries))
-      
-      // Update stats
-      journalStorage.updateStats()
-      
-      return entries[entryIndex]
-    } catch (error) {
-      throw new Error('Failed to update entry: ' + error.message)
-    }
-  },
-  
-  /**
-   * Delete a journal entry
-   */
-  deleteEntry: (id) => {
-    if (!checkStorageAvailability()) {
-      throw new Error('Storage not available')
-    }
-    
-    try {
-      const entries = safeJSONParse(localStorage.getItem(STORAGE_KEYS.ENTRIES), [])
-      const filteredEntries = entries.filter(entry => entry.id !== id)
-      
-      if (filteredEntries.length === entries.length) {
-        throw new Error('Entry not found')
-      }
-      
-      localStorage.setItem(STORAGE_KEYS.ENTRIES, safeJSONStringify(filteredEntries))
-      
-      // Update stats
-      journalStorage.updateStats()
-      
-      return true
-    } catch (error) {
-      throw new Error('Failed to delete entry: ' + error.message)
-    }
-  },
-  
-  /**
-   * Get journal statistics
-   */
-  getStats: () => {
-    if (!checkStorageAvailability()) {
-      return {
-        total_entries: 0,
-        total_words: 0,
-        entries_this_month: 0,
-        most_common_mindset: null,
-        most_common_reflection_type: null,
-        longest_streak: 0
-      }
-    }
-    
-    try {
-      const entries = safeJSONParse(localStorage.getItem(STORAGE_KEYS.ENTRIES), [])
-      
-      if (entries.length === 0) {
-        return {
-          total_entries: 0,
-          total_words: 0,
-          entries_this_month: 0,
-          most_common_mindset: null,
-          most_common_reflection_type: null,
-          longest_streak: 0
-        }
-      }
-      
-      const now = new Date()
-      const currentMonth = now.getMonth()
-      const currentYear = now.getFullYear()
-      
-      const stats = {
-        total_entries: entries.length,
-        total_words: entries.reduce((sum, entry) => sum + (entry.word_count || 0), 0),
-        entries_this_month: entries.filter(entry => {
-          const entryDate = new Date(entry.created_at)
-          return entryDate.getMonth() === currentMonth && entryDate.getFullYear() === currentYear
-        }).length,
-        most_common_mindset: null,
-        most_common_reflection_type: null,
-        longest_streak: 0
-      }
-      
-      // Calculate most common mindset
-      const mindsetCounts = {}
-      entries.forEach(entry => {
-        if (entry.mindset) {
-          mindsetCounts[entry.mindset] = (mindsetCounts[entry.mindset] || 0) + 1
-        }
-      })
-      
-      if (Object.keys(mindsetCounts).length > 0) {
-        stats.most_common_mindset = Object.keys(mindsetCounts).reduce((a, b) => 
-          mindsetCounts[a] > mindsetCounts[b] ? a : b
-        )
-      }
-      
-      // Calculate most common reflection type
-      const typeCounts = {}
-      entries.forEach(entry => {
-        if (entry.reflection_type) {
-          typeCounts[entry.reflection_type] = (typeCounts[entry.reflection_type] || 0) + 1
-        }
-      })
-      
-      if (Object.keys(typeCounts).length > 0) {
-        stats.most_common_reflection_type = Object.keys(typeCounts).reduce((a, b) => 
-          typeCounts[a] > typeCounts[b] ? a : b
-        )
-      }
-      
-      return stats
-    } catch (error) {
-      console.error('Failed to calculate stats:', error)
-      return {
-        total_entries: 0,
-        total_words: 0,
-        entries_this_month: 0,
-        most_common_mindset: null,
-        most_common_reflection_type: null,
-        longest_streak: 0
-      }
-    }
-  },
-  
-  /**
-   * Update statistics (called after CRUD operations)
-   */
-  updateStats: () => {
-    try {
-      const stats = journalStorage.getStats()
-      localStorage.setItem(STORAGE_KEYS.STATS, safeJSONStringify(stats))
-      return stats
-    } catch (error) {
-      console.error('Failed to update stats:', error)
-    }
-  },
-  
-  /**
-   * Export all journal data
-   */
-  exportData: () => {
-    try {
-      const entries = safeJSONParse(localStorage.getItem(STORAGE_KEYS.ENTRIES), [])
-      const stats = journalStorage.getStats()
-      
-      return {
-        entries,
-        stats,
-        exported_at: new Date().toISOString(),
-        version: '1.0'
-      }
-    } catch (error) {
-      throw new Error('Failed to export data: ' + error.message)
-    }
-  },
-  
-  /**
-   * Import journal data (with merge option)
-   */
-  importData: (data, merge = false) => {
-    if (!checkStorageAvailability()) {
-      throw new Error('Storage not available')
-    }
-    
-    try {
-      if (!data || !Array.isArray(data.entries)) {
-        throw new Error('Invalid import data format')
-      }
-      
-      let entries = data.entries
-      
-      if (merge) {
-        const existingEntries = safeJSONParse(localStorage.getItem(STORAGE_KEYS.ENTRIES), [])
-        // Merge, avoiding duplicates based on ID
-        const existingIds = new Set(existingEntries.map(e => e.id))
-        const newEntries = entries.filter(e => !existingIds.has(e.id))
-        entries = [...existingEntries, ...newEntries]
-      }
-      
-      localStorage.setItem(STORAGE_KEYS.ENTRIES, safeJSONStringify(entries))
-      journalStorage.updateStats()
-      
-      return true
-    } catch (error) {
-      throw new Error('Failed to import data: ' + error.message)
-    }
-  },
-  
-  /**
-   * Clear all journal data
-   */
-  clearAllData: () => {
-    if (!checkStorageAvailability()) {
-      throw new Error('Storage not available')
-    }
-    
-    try {
-      localStorage.removeItem(STORAGE_KEYS.ENTRIES)
-      localStorage.removeItem(STORAGE_KEYS.STATS)
-      localStorage.removeItem(STORAGE_KEYS.SETTINGS)
-      return true
-    } catch (error) {
-      throw new Error('Failed to clear data: ' + error.message)
-    }
-  },
-  
-  /**
-   * Auto-save draft functionality
-   */
-  saveDraft: (draftData) => {
-    if (!checkStorageAvailability()) {
-      return false
-    }
-    
-    try {
-      localStorage.setItem('sacred_journal_draft', safeJSONStringify({
-        ...draftData,
-        saved_at: new Date().toISOString()
-      }))
-      return true
-    } catch (error) {
-      console.error('Failed to save draft:', error)
-      return false
-    }
-  },
-  
-  /**
-   * Load saved draft
-   */
-  loadDraft: () => {
-    if (!checkStorageAvailability()) {
-      return null
-    }
-    
-    try {
-      const draft = safeJSONParse(localStorage.getItem('sacred_journal_draft'), null)
-      
-      // Return draft if it's less than 24 hours old
-      if (draft && draft.saved_at) {
-        const draftAge = Date.now() - new Date(draft.saved_at).getTime()
-        const twentyFourHours = 24 * 60 * 60 * 1000
-        
-        if (draftAge < twentyFourHours) {
-          return draft
-        }
-      }
-      
-      return null
-    } catch (error) {
-      console.error('Failed to load draft:', error)
-      return null
-    }
-  },
-  
-  /**
-   * Clear saved draft
-   */
-  clearDraft: () => {
-    if (!checkStorageAvailability()) {
-      return
-    }
-    
-    try {
-      localStorage.removeItem('sacred_journal_draft')
-    } catch (error) {
-      console.error('Failed to clear draft:', error)
-    }
-  }
-}
-
-// Export default for easy import
-export default journalStorage
diff --git a/yarn.lock b/yarn.lock
index 97578be..a5ae96e 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -387,17 +387,29 @@
   resolved "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.3.tgz"
   integrity sha512-bV0Tgo9K4hfPCek+aMAn81RppFKv2ySDQeMoSZuvTASywNTnVJCArCZE2FWqpvIatKu7VMRLWlR1EazvVhDyhQ==
 
-"@img/sharp-darwin-x64@0.34.2":
+"@img/sharp-libvips-linux-x64@1.1.0":
+  version "1.1.0"
+  resolved "https://registry.npmjs.org/@img/sharp-libvips-linux-x64/-/sharp-libvips-linux-x64-1.1.0.tgz"
+  integrity sha512-yRj2+reB8iMg9W5sULM3S74jVS7zqSzHG3Ol/twnAAkAhnGQnpjj6e4ayUz7V+FpKypwgs82xbRdYtchTTUB+Q==
+
+"@img/sharp-libvips-linuxmusl-x64@1.1.0":
+  version "1.1.0"
+  resolved "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-x64/-/sharp-libvips-linuxmusl-x64-1.1.0.tgz"
+  integrity sha512-wK7SBdwrAiycjXdkPnGCPLjYb9lD4l6Ze2gSdAGVZrEL05AOUJESWU2lhlC+Ffn5/G+VKuSm6zzbQSzFX/P65A==
+
+"@img/sharp-linux-x64@0.34.2":
   version "0.34.2"
-  resolved "https://registry.npmjs.org/@img/sharp-darwin-x64/-/sharp-darwin-x64-0.34.2.tgz"
-  integrity sha512-dYvWqmjU9VxqXmjEtjmvHnGqF8GrVjM2Epj9rJ6BUIXvk8slvNDJbhGFvIoXzkDhrJC2jUxNLz/GUjjvSzfw+g==
+  resolved "https://registry.npmjs.org/@img/sharp-linux-x64/-/sharp-linux-x64-0.34.2.tgz"
+  integrity sha512-sD7J+h5nFLMMmOXYH4DD9UtSNBD05tWSSdWAcEyzqW8Cn5UxXvsHAxmxSesYUsTOBmUnjtxghKDl15EvfqLFbQ==
   optionalDependencies:
-    "@img/sharp-libvips-darwin-x64" "1.1.0"
+    "@img/sharp-libvips-linux-x64" "1.1.0"
 
-"@img/sharp-libvips-darwin-x64@1.1.0":
-  version "1.1.0"
-  resolved "https://registry.npmjs.org/@img/sharp-libvips-darwin-x64/-/sharp-libvips-darwin-x64-1.1.0.tgz"
-  integrity sha512-Xzc2ToEmHN+hfvsl9wja0RlnXEgpKNmftriQp6XzY/RaSfwD9th+MSh0WQKzUreLKKINb3afirxW7A0fz2YWuQ==
+"@img/sharp-linuxmusl-x64@0.34.2":
+  version "0.34.2"
+  resolved "https://registry.npmjs.org/@img/sharp-linuxmusl-x64/-/sharp-linuxmusl-x64-0.34.2.tgz"
+  integrity sha512-DOYMrDm5E6/8bm/yQLCWyuDJwUnlevR8xtF8bs+gjZ7cyUNYXiSf/E8Kp0Ss5xasIaXSHzb888V1BE4i1hFhAA==
+  optionalDependencies:
+    "@img/sharp-libvips-linuxmusl-x64" "1.1.0"
 
 "@isaacs/cliui@^8.0.2":
   version "8.0.2"
@@ -663,10 +675,15 @@
   dependencies:
     fast-glob "3.3.1"
 
-"@next/swc-darwin-x64@15.3.2":
+"@next/swc-linux-x64-gnu@15.3.2":
+  version "15.3.2"
+  resolved "https://registry.npmjs.org/@next/swc-linux-x64-gnu/-/swc-linux-x64-gnu-15.3.2.tgz"
+  integrity sha512-uRBo6THWei0chz+Y5j37qzx+BtoDRFIkDzZjlpCItBRXyMPIg079eIkOCl3aqr2tkxL4HFyJ4GHDes7W8HuAUg==
+
+"@next/swc-linux-x64-musl@15.3.2":
   version "15.3.2"
-  resolved "https://registry.npmjs.org/@next/swc-darwin-x64/-/swc-darwin-x64-15.3.2.tgz"
-  integrity sha512-ro/fdqaZWL6k1S/5CLv1I0DaZfDVJkWNaUU3un8Lg6m0YENWlDulmIWzV96Iou2wEYyEsZq51mwV8+XQXqMp3w==
+  resolved "https://registry.npmjs.org/@next/swc-linux-x64-musl/-/swc-linux-x64-musl-15.3.2.tgz"
+  integrity sha512-+uxFlPuCNx/T9PdMClOqeE8USKzj8tVz37KflT3Kdbx/LOlZBRI2yxuIcmx1mPNK8DwSOMNCr4ureSet7eyC0w==
 
 "@nodelib/fs.scandir@2.1.5":
   version "2.1.5"
@@ -1383,10 +1400,15 @@
   resolved "https://registry.npmjs.org/@ungap/structured-clone/-/structured-clone-1.3.0.tgz"
   integrity sha512-WmoN8qaIAo7WTYWbAZuG8PYEhn5fkz7dZrqTBZ7dtt//lL2Gwms1IcnQ5yHqjDfX8Ft5j4YzDM23f87zBfDe9g==
 
-"@unrs/resolver-binding-darwin-x64@1.7.3":
+"@unrs/resolver-binding-linux-x64-gnu@1.7.3":
   version "1.7.3"
-  resolved "https://registry.npmjs.org/@unrs/resolver-binding-darwin-x64/-/resolver-binding-darwin-x64-1.7.3.tgz"
-  integrity sha512-zrRoLxQ1CGg4kvuDLU9ehCRGFd8TTVdh5G7NRMwt5r/vr5/QPvI2KNM1rBnMQ/p+9KBewlFcT7tMXEMe5ywLwg==
+  resolved "https://registry.npmjs.org/@unrs/resolver-binding-linux-x64-gnu/-/resolver-binding-linux-x64-gnu-1.7.3.tgz"
+  integrity sha512-U+ZsvSj41FU5yZ8smcW/oyygRsjOEqhPsMdsL3E6TfLFE1wDoLKgt2SL4GY33Sy+o3kigOEpYbsFy3CUXrYmsg==
+
+"@unrs/resolver-binding-linux-x64-musl@1.7.3":
+  version "1.7.3"
+  resolved "https://registry.npmjs.org/@unrs/resolver-binding-linux-x64-musl/-/resolver-binding-linux-x64-musl-1.7.3.tgz"
+  integrity sha512-ESJHg0tdk13rXMtMjC8wveCrBBX0shwZjpJT9mHkOocdsCoQWY6wD2jRDOqUxnMfrF0OQ2bqZQNoIWqMKyZsDw==
 
 abab@^2.0.6:
   version "2.0.6"
@@ -2818,11 +2840,6 @@ fs.realpath@^1.0.0:
   resolved "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz"
   integrity sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==
 
-fsevents@^2.3.2, fsevents@~2.3.2:
-  version "2.3.3"
-  resolved "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz"
-  integrity sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==
-
 function-bind@^1.1.2:
   version "1.1.2"
   resolved "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz"
